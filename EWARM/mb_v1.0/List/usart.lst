###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  09:49:56 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\Src\usart.c     #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\Src\usart.c"   #
#                    -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F103xB   #
#                    -lC "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM\mb_v1.0/List\" -o                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\usart.lst                                            #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\usart.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\Src\usart.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : USART.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the USART instances.
      6            ******************************************************************************
      7            * This notice applies to any and all portions of this file
      8            * that are not between comment pairs USER CODE BEGIN and
      9            * USER CODE END. Other portions of this file, whether 
     10            * inserted by the user or by software development tools
     11            * are owned by their respective copyright owners.
     12            *
     13            * Copyright (c) 2018 STMicroelectronics International N.V. 
     14            * All rights reserved.
     15            *
     16            * Redistribution and use in source and binary forms, with or without 
     17            * modification, are permitted, provided that the following conditions are met:
     18            *
     19            * 1. Redistribution of source code must retain the above copyright notice, 
     20            *    this list of conditions and the following disclaimer.
     21            * 2. Redistributions in binary form must reproduce the above copyright notice,
     22            *    this list of conditions and the following disclaimer in the documentation
     23            *    and/or other materials provided with the distribution.
     24            * 3. Neither the name of STMicroelectronics nor the names of other 
     25            *    contributors to this software may be used to endorse or promote products 
     26            *    derived from this software without specific written permission.
     27            * 4. This software, including modifications and/or derivative works of this 
     28            *    software, must execute solely and exclusively on microcontroller or
     29            *    microprocessor devices manufactured by or for STMicroelectronics.
     30            * 5. Redistribution and use of this software other than as permitted under 
     31            *    this license is void and will automatically terminate your rights under 
     32            *    this license. 
     33            *
     34            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     35            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     36            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     37            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     38            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     39            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     40            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     41            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     42            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     43            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     44            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     45            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     46            *
     47            ******************************************************************************
     48            */
     49          
     50          /* Includes ------------------------------------------------------------------*/
     51          #include "usart.h"

  /**
    ^
"D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usart.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetPriorityGrouping(void)
   \                     NVIC_GetPriorityGrouping:
   \   00000000   0x....             LDR.N    R0,??DataTable10  ;; 0xe000ed0c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable10_1  ;; 0xe000e100
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000C   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000010   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000006   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000008   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000000C   0x....             LDR.N    R2,??DataTable10_2  ;; 0xe000ed18
   \   0000000E   0x1880             ADDS     R0,R0,R2
   \   00000010   0x0109             LSLS     R1,R1,#+4
   \   00000012   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \   00000016   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0:
   \   00000018   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001A   0x....             LDR.N    R2,??DataTable10_3  ;; 0xe000e400
   \   0000001C   0x0109             LSLS     R1,R1,#+4
   \   0000001E   0x5481             STRB     R1,[R0, R2]
   \                     ??NVIC_SetPriority_1:
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000006   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \   0000000A   0x2B05             CMP      R3,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \   0000000E   0x2304             MOVS     R3,#+4
   \   00000010   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0:
   \   00000012   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1:
   \   00000016   0x1D04             ADDS     R4,R0,#+4
   \   00000018   0x2C07             CMP      R4,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2:
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3:
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xFA14 0xF303      LSLS     R3,R4,R3
   \   00000028   0x1E5B             SUBS     R3,R3,#+1
   \   0000002A   0x4019             ANDS     R1,R3,R1
   \   0000002C   0x4081             LSLS     R1,R1,R0
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0xBC10             POP      {R4}
   \   0000003C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_APB2_GRP1_EnableClock(uint32_t)
   \                     LL_APB2_GRP1_EnableClock:
   \   00000000   0xB081             SUB      SP,SP,#+4
   \   00000002   0x....             LDR.N    R1,??DataTable10_4  ;; 0x40021018
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4301             ORRS     R1,R0,R1
   \   00000008   0x....             LDR.N    R2,??DataTable10_4  ;; 0x40021018
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable10_4  ;; 0x40021018
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x4008             ANDS     R0,R0,R1
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0xB001             ADD      SP,SP,#+4
   \   00000018   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_Enable(USART_TypeDef *)
   \                     LL_USART_Enable:
   \   00000000   0x68C1             LDR      R1,[R0, #+12]
   \   00000002   0xF451 0x5100      ORRS     R1,R1,#0x2000
   \   00000006   0x60C1             STR      R1,[R0, #+12]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_Disable(USART_TypeDef *)
   \                     LL_USART_Disable:
   \   00000000   0x68C1             LDR      R1,[R0, #+12]
   \   00000002   0xF431 0x5100      BICS     R1,R1,#0x2000
   \   00000006   0x60C1             STR      R1,[R0, #+12]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_ConfigAsyncMode(USART_TypeDef *)
   \                     LL_USART_ConfigAsyncMode:
   \   00000000   0x6901             LDR      R1,[R0, #+16]
   \   00000002   0xF431 0x4190      BICS     R1,R1,#0x4800
   \   00000006   0x6101             STR      R1,[R0, #+16]
   \   00000008   0x6941             LDR      R1,[R0, #+20]
   \   0000000A   0xF031 0x012A      BICS     R1,R1,#0x2A
   \   0000000E   0x6141             STR      R1,[R0, #+20]
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_EnableIT_RXNE(USART_TypeDef *)
   \                     LL_USART_EnableIT_RXNE:
   \   00000000   0x68C1             LDR      R1,[R0, #+12]
   \   00000002   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   00000006   0x60C1             STR      R1,[R0, #+12]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_EnableIT_TC(USART_TypeDef *)
   \                     LL_USART_EnableIT_TC:
   \   00000000   0x68C1             LDR      R1,[R0, #+12]
   \   00000002   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   00000006   0x60C1             STR      R1,[R0, #+12]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_DisableIT_RXNE(USART_TypeDef *)
   \                     LL_USART_DisableIT_RXNE:
   \   00000000   0x68C1             LDR      R1,[R0, #+12]
   \   00000002   0xF031 0x0120      BICS     R1,R1,#0x20
   \   00000006   0x60C1             STR      R1,[R0, #+12]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_USART_DisableIT_TC(USART_TypeDef *)
   \                     LL_USART_DisableIT_TC:
   \   00000000   0x68C1             LDR      R1,[R0, #+12]
   \   00000002   0xF031 0x0140      BICS     R1,R1,#0x40
   \   00000006   0x60C1             STR      R1,[R0, #+12]
   \   00000008   0x4770             BX       LR               ;; return
     52          
     53          #include "gpio.h"
     54          
     55          /* USER CODE BEGIN 0 */
     56          #include "FreeRTOS.h"
     57          #include "task.h"
     58          #include "cmsis_os.h"
     59          
     60          extern osSemaphoreId MbTXSemHandle;
     61          /* USER CODE END 0 */
     62          
     63          /* USART1 init function */
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void MX_USART1_UART_Init(void)
     66          {
   \                     MX_USART1_UART_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     67            LL_USART_InitTypeDef USART_InitStruct;
     68          
     69            LL_GPIO_InitTypeDef GPIO_InitStruct;
     70            /* Peripheral clock enable */
     71            LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
   \   00000004   0xF44F 0x4080      MOV      R0,#+16384
   \   00000008   0x.... 0x....      BL       LL_APB2_GRP1_EnableClock
     72            
     73            /**USART1 GPIO Configuration  
     74            PA9   ------> USART1_TX
     75            PA10   ------> USART1_RX 
     76            */
     77            GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
   \   0000000C   0x....             LDR.N    R0,??DataTable10_5  ;; 0x4020002
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     78            GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
   \   00000010   0x2009             MOVS     R0,#+9
   \   00000012   0x9001             STR      R0,[SP, #+4]
     79            GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x9002             STR      R0,[SP, #+8]
     80            GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9003             STR      R0,[SP, #+12]
     81            LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010800
   \   00000020   0x.... 0x....      BL       LL_GPIO_Init
     82          
     83            GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
   \   00000024   0x....             LDR.N    R0,??DataTable10_7  ;; 0x4040004
   \   00000026   0x9000             STR      R0,[SP, #+0]
     84            GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
   \   00000028   0x2004             MOVS     R0,#+4
   \   0000002A   0x9001             STR      R0,[SP, #+4]
     85            LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010800
   \   00000030   0x.... 0x....      BL       LL_GPIO_Init
     86          
     87            /* USART1 interrupt Init */
     88            NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
   \   00000034   0x.... 0x....      BL       NVIC_GetPriorityGrouping
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x2105             MOVS     R1,#+5
   \   0000003C   0x.... 0x....      BL       NVIC_EncodePriority
   \   00000040   0x0001             MOVS     R1,R0
   \   00000042   0x2025             MOVS     R0,#+37
   \   00000044   0x.... 0x....      BL       NVIC_SetPriority
     89            NVIC_EnableIRQ(USART1_IRQn);
   \   00000048   0x2025             MOVS     R0,#+37
   \   0000004A   0x.... 0x....      BL       NVIC_EnableIRQ
     90          
     91            USART_InitStruct.BaudRate = mbBaudRate;
   \   0000004E   0xF44F 0x4016      MOV      R0,#+38400
   \   00000052   0x9005             STR      R0,[SP, #+20]
     92            USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
   \   00000054   0xF44F 0x5080      MOV      R0,#+4096
   \   00000058   0x9006             STR      R0,[SP, #+24]
     93            USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9007             STR      R0,[SP, #+28]
     94            USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
   \   0000005E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000062   0x9008             STR      R0,[SP, #+32]
     95            USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
   \   00000064   0x200C             MOVS     R0,#+12
   \   00000066   0x9009             STR      R0,[SP, #+36]
     96            USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x900A             STR      R0,[SP, #+40]
     97            LL_USART_Init(USART1, &USART_InitStruct);
   \   0000006C   0xA905             ADD      R1,SP,#+20
   \   0000006E   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000070   0x.... 0x....      BL       LL_USART_Init
     98          
     99            LL_USART_ConfigAsyncMode(USART1);
   \   00000074   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000076   0x.... 0x....      BL       LL_USART_ConfigAsyncMode
    100          
    101            LL_USART_Enable(USART1);
   \   0000007A   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   0000007C   0x.... 0x....      BL       LL_USART_Enable
    102          
    103          }
   \   00000080   0xB00B             ADD      SP,SP,#+44
   \   00000082   0xBD00             POP      {PC}             ;; return
    104          
    105          /* USER CODE BEGIN 1 */
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
    108          {
   \                     vMBPortSerialEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    109            if (xRxEnable)
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD003             BEQ.N    ??vMBPortSerialEnable_0
    110          		LL_USART_EnableIT_RXNE(mbUART);
   \   0000000A   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   0000000C   0x.... 0x....      BL       LL_USART_EnableIT_RXNE
   \   00000010   0xE002             B.N      ??vMBPortSerialEnable_1
    111            else
    112          		LL_USART_DisableIT_RXNE(mbUART);
   \                     ??vMBPortSerialEnable_0:
   \   00000012   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000014   0x.... 0x....      BL       LL_USART_DisableIT_RXNE
    113          
    114            if (xTxEnable)
   \                     ??vMBPortSerialEnable_1:
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD003             BEQ.N    ??vMBPortSerialEnable_2
    115          		LL_USART_EnableIT_TC(mbUART);
   \   0000001E   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000020   0x.... 0x....      BL       LL_USART_EnableIT_TC
   \   00000024   0xE002             B.N      ??vMBPortSerialEnable_3
    116            else
    117          		LL_USART_DisableIT_TC(mbUART);
   \                     ??vMBPortSerialEnable_2:
   \   00000026   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000028   0x.... 0x....      BL       LL_USART_DisableIT_TC
    118          }
   \                     ??vMBPortSerialEnable_3:
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void vMBPortClose(void)
    121          {
   \                     vMBPortClose:
   \   00000000   0xB580             PUSH     {R7,LR}
    122            LL_USART_DisableIT_TC(mbUART);
   \   00000002   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000004   0x.... 0x....      BL       LL_USART_DisableIT_TC
    123            LL_USART_DisableIT_RXNE(mbUART);
   \   00000008   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   0000000A   0x.... 0x....      BL       LL_USART_DisableIT_RXNE
    124            
    125            LL_USART_Disable(mbUART);
   \   0000000E   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40013800
   \   00000010   0x.... 0x....      BL       LL_USART_Disable
    126          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    127          

   \                                 In section .text, align 2, keep-with-next
    128          void UART_PutChar(char Char)
    129          {
    130               /* Transmit Data */
    131              mbUART->DR = (Char & (uint16_t)0x01FF);
   \                     UART_PutChar:
   \   00000000   0x....             LDR.N    R1,??DataTable10_9  ;; 0x40013804
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x6008             STR      R0,[R1, #+0]
    132          }
   \   00000006   0x4770             BX       LR               ;; return
    133          

   \                                 In section .text, align 2, keep-with-next
    134          BOOL xMBPortSerialPutByte(CHAR ucByte)
    135          {
    136            mbUART->DR = (ucByte & (uint16_t)0x01FF);
   \                     xMBPortSerialPutByte:
   \   00000000   0x....             LDR.N    R1,??DataTable10_9  ;; 0x40013804
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x6008             STR      R0,[R1, #+0]
    137            return TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4770             BX       LR               ;; return
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          BOOL xMBPortSerialGetByte(CHAR * pucByte)
    141          {
    142            *pucByte = (mbUART->DR & (uint16_t)0x01FF);
   \                     xMBPortSerialGetByte:
   \   00000000   0x....             LDR.N    R1,??DataTable10_9  ;; 0x40013804
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    143            return TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4770             BX       LR               ;; return
    144          }
    145          

   \                                 In section .text, align 2, keep-with-next
    146          ErrorStatus UARTSendMess(char *mes, uint16_t len)
    147          { 
   \                     UARTSendMess:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    148           uint16_t i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    149          
    150            do
    151            {
    152              
    153              UART_PutChar(mes[i]);///< кладем символ в регистр данных DR 
   \                     ??UARTSendMess_0:
   \   00000008   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000A   0x5D30             LDRB     R0,[R6, R4]
   \   0000000C   0x.... 0x....      BL       UART_PutChar
    154              if( xSemaphoreTake(MbTXSemHandle, 10 / portTICK_RATE_MS) != pdTRUE )  ///< ждем пока сработает прерывание по окончании передачи
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x220A             MOVS     R2,#+10
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x....             LDR.N    R0,??DataTable10_10
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       xQueueGenericReceive
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD001             BEQ.N    ??UARTSendMess_1
    155                                                                         return ERROR;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE005             B.N      ??UARTSendMess_2
    156              i++;
   \                     ??UARTSendMess_1:
   \   00000026   0x1C76             ADDS     R6,R6,#+1
    157            }
    158            while(i < len);
   \   00000028   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x42AE             CMP      R6,R5
   \   0000002E   0xD3EB             BCC.N    ??UARTSendMess_0
    159                
    160           return SUCCESS;
   \   00000030   0x2001             MOVS     R0,#+1
   \                     ??UARTSendMess_2:
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    161          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x04020002         DC32     0x4020002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x04040004         DC32     0x4040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     MbTXSemHandle
    162          
    163          /* USER CODE END 1 */
    164          
    165          /**
    166            * @}
    167            */
    168          
    169          /**
    170            * @}
    171            */
    172          
    173          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  LL_APB2_GRP1_EnableClock
        0  LL_USART_ConfigAsyncMode
        0  LL_USART_Disable
        0  LL_USART_DisableIT_RXNE
        0  LL_USART_DisableIT_TC
        0  LL_USART_Enable
        0  LL_USART_EnableIT_RXNE
        0  LL_USART_EnableIT_TC
       48  MX_USART1_UART_Init
             48 -> LL_APB2_GRP1_EnableClock
             48 -> LL_GPIO_Init
             48 -> LL_USART_ConfigAsyncMode
             48 -> LL_USART_Enable
             48 -> LL_USART_Init
             48 -> NVIC_EnableIRQ
             48 -> NVIC_EncodePriority
             48 -> NVIC_GetPriorityGrouping
             48 -> NVIC_SetPriority
        0  NVIC_EnableIRQ
        4  NVIC_EncodePriority
        0  NVIC_GetPriorityGrouping
        0  NVIC_SetPriority
       16  UARTSendMess
             16 -> UART_PutChar
             16 -> xQueueGenericReceive
        0  UART_PutChar
        8  vMBPortClose
              8 -> LL_USART_Disable
              8 -> LL_USART_DisableIT_RXNE
              8 -> LL_USART_DisableIT_TC
        8  vMBPortSerialEnable
              8 -> LL_USART_DisableIT_RXNE
              8 -> LL_USART_DisableIT_TC
              8 -> LL_USART_EnableIT_RXNE
              8 -> LL_USART_EnableIT_TC
        0  xMBPortSerialGetByte
        0  xMBPortSerialPutByte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      26  LL_APB2_GRP1_EnableClock
      18  LL_USART_ConfigAsyncMode
      10  LL_USART_Disable
      10  LL_USART_DisableIT_RXNE
      10  LL_USART_DisableIT_TC
      10  LL_USART_Enable
      10  LL_USART_EnableIT_RXNE
      10  LL_USART_EnableIT_TC
     132  MX_USART1_UART_Init
      22  NVIC_EnableIRQ
      62  NVIC_EncodePriority
      10  NVIC_GetPriorityGrouping
      34  NVIC_SetPriority
      52  UARTSendMess
       8  UART_PutChar
      22  vMBPortClose
      46  vMBPortSerialEnable
      10  xMBPortSerialGetByte
      10  xMBPortSerialPutByte

 
 556 bytes in section .text
 
 556 bytes of CODE memory

Errors: none
Warnings: 1
