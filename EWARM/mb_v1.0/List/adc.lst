###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  06:15:52 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\Src\adc.c       #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\Src\adc.c" -D  #
#                    USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F103xB -lC  #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    List\" -o "D:\projects\задания от                        #
#                    работодателя\ЭМИС\EWARM\mb_v1.0/Obj\" --no_cse           #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\adc.lst                                              #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\adc.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\Src\adc.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : ADC.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the ADC instances.
      6            ******************************************************************************
      7            * This notice applies to any and all portions of this file
      8            * that are not between comment pairs USER CODE BEGIN and
      9            * USER CODE END. Other portions of this file, whether 
     10            * inserted by the user or by software development tools
     11            * are owned by their respective copyright owners.
     12            *
     13            * Copyright (c) 2018 STMicroelectronics International N.V. 
     14            * All rights reserved.
     15            *
     16            * Redistribution and use in source and binary forms, with or without 
     17            * modification, are permitted, provided that the following conditions are met:
     18            *
     19            * 1. Redistribution of source code must retain the above copyright notice, 
     20            *    this list of conditions and the following disclaimer.
     21            * 2. Redistributions in binary form must reproduce the above copyright notice,
     22            *    this list of conditions and the following disclaimer in the documentation
     23            *    and/or other materials provided with the distribution.
     24            * 3. Neither the name of STMicroelectronics nor the names of other 
     25            *    contributors to this software may be used to endorse or promote products 
     26            *    derived from this software without specific written permission.
     27            * 4. This software, including modifications and/or derivative works of this 
     28            *    software, must execute solely and exclusively on microcontroller or
     29            *    microprocessor devices manufactured by or for STMicroelectronics.
     30            * 5. Redistribution and use of this software other than as permitted under 
     31            *    this license is void and will automatically terminate your rights under 
     32            *    this license. 
     33            *
     34            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     35            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     36            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     37            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     38            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     39            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     40            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     41            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     42            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     43            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     44            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     45            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     46            *
     47            ******************************************************************************
     48            */
     49          
     50          /* Includes ------------------------------------------------------------------*/
     51          #include "adc.h"

  /**
    ^
"D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_adc.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetPriorityGrouping(void)
   \                     NVIC_GetPriorityGrouping:
   \   00000000   0x....             LDR.N    R0,??DataTable4  ;; 0xe000ed0c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable4_1  ;; 0xe000e100
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000C   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000010   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000006   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000008   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000000C   0x....             LDR.N    R2,??DataTable4_2  ;; 0xe000ed18
   \   0000000E   0x1880             ADDS     R0,R0,R2
   \   00000010   0x0109             LSLS     R1,R1,#+4
   \   00000012   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \   00000016   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0:
   \   00000018   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001A   0x....             LDR.N    R2,??DataTable4_3  ;; 0xe000e400
   \   0000001C   0x0109             LSLS     R1,R1,#+4
   \   0000001E   0x5481             STRB     R1,[R0, R2]
   \                     ??NVIC_SetPriority_1:
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000006   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \   0000000A   0x2B05             CMP      R3,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \   0000000E   0x2304             MOVS     R3,#+4
   \   00000010   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0:
   \   00000012   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1:
   \   00000016   0x1D04             ADDS     R4,R0,#+4
   \   00000018   0x2C07             CMP      R4,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2:
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3:
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xFA14 0xF303      LSLS     R3,R4,R3
   \   00000028   0x1E5B             SUBS     R3,R3,#+1
   \   0000002A   0x4019             ANDS     R1,R3,R1
   \   0000002C   0x4081             LSLS     R1,R1,R0
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0xBC10             POP      {R4}
   \   0000003C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_APB2_GRP1_EnableClock(uint32_t)
   \                     LL_APB2_GRP1_EnableClock:
   \   00000000   0xB081             SUB      SP,SP,#+4
   \   00000002   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40021018
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4301             ORRS     R1,R0,R1
   \   00000008   0x....             LDR.N    R2,??DataTable4_4  ;; 0x40021018
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40021018
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x4008             ANDS     R0,R0,R1
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0xB001             ADD      SP,SP,#+4
   \   00000018   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *, uint32_t, uint32_t)
   \                     LL_ADC_REG_SetSequencerRanks:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x302C             ADDS     R0,R0,#+44
   \   00000004   0xF44F 0x7340      MOV      R3,#+768
   \   00000008   0x400B             ANDS     R3,R3,R1
   \   0000000A   0xF45F 0x0440      MOVS     R4,#+12582912
   \   0000000E   0xFAB4 0xF484      CLZ      R4,R4
   \   00000012   0x40E3             LSRS     R3,R3,R4
   \   00000014   0xEB10 0x0083      ADDS     R0,R0,R3, LSL #+2
   \   00000018   0x6803             LDR      R3,[R0, #+0]
   \   0000001A   0x241F             MOVS     R4,#+31
   \   0000001C   0xF011 0x051F      ANDS     R5,R1,#0x1F
   \   00000020   0x40AC             LSLS     R4,R4,R5
   \   00000022   0x43A3             BICS     R3,R3,R4
   \   00000024   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \   00000028   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000002C   0xFA12 0xF101      LSLS     R1,R2,R1
   \   00000030   0x4319             ORRS     R1,R1,R3
   \   00000032   0x6001             STR      R1,[R0, #+0]
   \   00000034   0xBC30             POP      {R4,R5}
   \   00000036   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *, uint32_t, uint32_t)
   \                     LL_ADC_SetChannelSamplingTime:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x300C             ADDS     R0,R0,#+12
   \   00000004   0xF011 0x7300      ANDS     R3,R1,#0x2000000
   \   00000008   0x2440             MOVS     R4,#+64
   \   0000000A   0xFAB4 0xF484      CLZ      R4,R4
   \   0000000E   0x40E3             LSRS     R3,R3,R4
   \   00000010   0xEB10 0x0083      ADDS     R0,R0,R3, LSL #+2
   \   00000014   0xF44F 0x6378      MOV      R3,#+3968
   \   00000018   0xFAB3 0xF383      CLZ      R3,R3
   \   0000001C   0x6804             LDR      R4,[R0, #+0]
   \   0000001E   0x2507             MOVS     R5,#+7
   \   00000020   0xF011 0x76F8      ANDS     R6,R1,#0x1F00000
   \   00000024   0xFA36 0xF303      LSRS     R3,R6,R3
   \   00000028   0xFA15 0xF303      LSLS     R3,R5,R3
   \   0000002C   0xEA34 0x0303      BICS     R3,R4,R3
   \   00000030   0xF011 0x71F8      ANDS     R1,R1,#0x1F00000
   \   00000034   0xF44F 0x6478      MOV      R4,#+3968
   \   00000038   0xFAB4 0xF484      CLZ      R4,R4
   \   0000003C   0x40E1             LSRS     R1,R1,R4
   \   0000003E   0xFA12 0xF101      LSLS     R1,R2,R1
   \   00000042   0x4319             ORRS     R1,R1,R3
   \   00000044   0x6001             STR      R1,[R0, #+0]
   \   00000046   0xBC70             POP      {R4-R6}
   \   00000048   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_ADC_StartCalibration(ADC_TypeDef *)
   \                     LL_ADC_StartCalibration:
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0xF051 0x0104      ORRS     R1,R1,#0x4
   \   00000006   0x6081             STR      R1,[R0, #+8]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *)
   \                     LL_ADC_IsCalibrationOnGoing:
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0x4770             BX       LR               ;; return
     52          
     53          #include "gpio.h"
     54          
     55          /* USER CODE BEGIN 0 */
     56          
     57          /* USER CODE END 0 */
     58          
     59          /* ADC1 init function */

   \                                 In section .text, align 2, keep-with-next
     60          void MX_ADC1_Init(void)
     61          {
   \                     MX_ADC1_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
     62            LL_ADC_InitTypeDef ADC_InitStruct;
     63            LL_ADC_CommonInitTypeDef ADC_CommonInitStruct;
     64            LL_ADC_REG_InitTypeDef ADC_REG_InitStruct;
     65          
     66            LL_GPIO_InitTypeDef GPIO_InitStruct;
     67            /* Peripheral clock enable */
     68            LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
   \   00000004   0xF44F 0x7000      MOV      R0,#+512
   \   00000008   0x.... 0x....      BL       LL_APB2_GRP1_EnableClock
     69            
     70            /**ADC1 GPIO Configuration  
     71            PA2   ------> ADC1_IN2 
     72            */
     73            GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
   \   0000000C   0xF240 0x4004      MOVW     R0,#+1028
   \   00000010   0x9008             STR      R0,[SP, #+32]
     74            GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9009             STR      R0,[SP, #+36]
     75            LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000016   0xA908             ADD      R1,SP,#+32
   \   00000018   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40010800
   \   0000001A   0x.... 0x....      BL       LL_GPIO_Init
     76          
     77            /* ADC1 interrupt Init */
     78            NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
   \   0000001E   0x.... 0x....      BL       NVIC_GetPriorityGrouping
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2105             MOVS     R1,#+5
   \   00000026   0x.... 0x....      BL       NVIC_EncodePriority
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0x2012             MOVS     R0,#+18
   \   0000002E   0x.... 0x....      BL       NVIC_SetPriority
     79            NVIC_EnableIRQ(ADC1_2_IRQn);
   \   00000032   0x2012             MOVS     R0,#+18
   \   00000034   0x.... 0x....      BL       NVIC_EnableIRQ
     80          
     81              /**Common config 
     82              */
     83            ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9001             STR      R0,[SP, #+4]
     84            ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x9002             STR      R0,[SP, #+8]
     85            LL_ADC_Init(ADC1, &ADC_InitStruct);
   \   00000040   0xA901             ADD      R1,SP,#+4
   \   00000042   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40012400
   \   00000044   0x.... 0x....      BL       LL_ADC_Init
     86          
     87            ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
     88            LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
   \   0000004C   0xA900             ADD      R1,SP,#+0
   \   0000004E   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40012400
   \   00000050   0x.... 0x....      BL       LL_ADC_CommonInit
     89          
     90            ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
   \   00000054   0xF45F 0x2000      MOVS     R0,#+524288
   \   00000058   0x9003             STR      R0,[SP, #+12]
     91            ADC_REG_InitStruct.SequencerLength = 1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x9004             STR      R0,[SP, #+16]
     92            ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x9005             STR      R0,[SP, #+20]
     93            ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9006             STR      R0,[SP, #+24]
     94            ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x9007             STR      R0,[SP, #+28]
     95            LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
   \   0000006A   0xA903             ADD      R1,SP,#+12
   \   0000006C   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40012400
   \   0000006E   0x.... 0x....      BL       LL_ADC_REG_Init
     96          
     97              /**Configure Regular Channel 
     98              */
     99            LL_ADC_REG_SetSequencerRanks(ADC1, 1, LL_ADC_CHANNEL_2);
   \   00000072   0x....             LDR.N    R2,??DataTable4_7  ;; 0x2600002
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40012400
   \   00000078   0x.... 0x....      BL       LL_ADC_REG_SetSequencerRanks
    100          
    101            LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_55CYCLES_5);
   \   0000007C   0x2205             MOVS     R2,#+5
   \   0000007E   0x....             LDR.N    R1,??DataTable4_7  ;; 0x2600002
   \   00000080   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40012400
   \   00000082   0x.... 0x....      BL       LL_ADC_SetChannelSamplingTime
    102          
    103          }
   \   00000086   0xB00D             ADD      SP,SP,#+52
   \   00000088   0xBD00             POP      {PC}             ;; return
    104          
    105          /* USER CODE BEGIN 1 */

   \                                 In section .text, align 2, keep-with-next
    106          void ADC_Calibrate(ADC_TypeDef *ADCx)
    107          {
   \                     ADC_Calibrate:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    108            SET_BIT(ADCx->CR2, ADC_CR2_RSTCAL);
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000000A   0x60A0             STR      R0,[R4, #+8]
    109            while(ADCx->CR2 & ADC_CR2_RSTCAL);
   \                     ??ADC_Calibrate_0:
   \   0000000C   0x68A0             LDR      R0,[R4, #+8]
   \   0000000E   0x0700             LSLS     R0,R0,#+28
   \   00000010   0xD4FC             BMI.N    ??ADC_Calibrate_0
    110            LL_ADC_StartCalibration(ADCx);
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       LL_ADC_StartCalibration
    111            while(LL_ADC_IsCalibrationOnGoing(ADCx));
   \                     ??ADC_Calibrate_1:
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       LL_ADC_IsCalibrationOnGoing
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1FA             BNE.N    ??ADC_Calibrate_1
    112          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x02600002         DC32     0x2600002
    113          /* USER CODE END 1 */
    114          
    115          /**
    116            * @}
    117            */
    118          
    119          /**
    120            * @}
    121            */
    122          
    123          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ADC_Calibrate
              8 -> LL_ADC_IsCalibrationOnGoing
              8 -> LL_ADC_StartCalibration
        0  LL_ADC_IsCalibrationOnGoing
        8  LL_ADC_REG_SetSequencerRanks
       12  LL_ADC_SetChannelSamplingTime
        0  LL_ADC_StartCalibration
        4  LL_APB2_GRP1_EnableClock
       56  MX_ADC1_Init
             56 -> LL_ADC_CommonInit
             56 -> LL_ADC_Init
             56 -> LL_ADC_REG_Init
             56 -> LL_ADC_REG_SetSequencerRanks
             56 -> LL_ADC_SetChannelSamplingTime
             56 -> LL_APB2_GRP1_EnableClock
             56 -> LL_GPIO_Init
             56 -> NVIC_EnableIRQ
             56 -> NVIC_EncodePriority
             56 -> NVIC_GetPriorityGrouping
             56 -> NVIC_SetPriority
        0  NVIC_EnableIRQ
        4  NVIC_EncodePriority
        0  NVIC_GetPriorityGrouping
        0  NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
      36  ADC_Calibrate
      12  LL_ADC_IsCalibrationOnGoing
      56  LL_ADC_REG_SetSequencerRanks
      74  LL_ADC_SetChannelSamplingTime
      10  LL_ADC_StartCalibration
      26  LL_APB2_GRP1_EnableClock
     138  MX_ADC1_Init
      22  NVIC_EnableIRQ
      62  NVIC_EncodePriority
      10  NVIC_GetPriorityGrouping
      34  NVIC_SetPriority

 
 512 bytes in section .text
 
 512 bytes of CODE memory

Errors: none
Warnings: 1
