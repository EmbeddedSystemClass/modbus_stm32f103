###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  09:12:44 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\Src\main.c      #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\Src\main.c"    #
#                    -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F103xB   #
#                    -lC "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM\mb_v1.0/List\" -o                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\main.lst                                             #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\main.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\Src\main.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * This notice applies to any and all portions of this file
      8            * that are not between comment pairs USER CODE BEGIN and
      9            * USER CODE END. Other portions of this file, whether 
     10            * inserted by the user or by software development tools
     11            * are owned by their respective copyright owners.
     12            *
     13            * Copyright (c) 2018 STMicroelectronics International N.V. 
     14            * All rights reserved.
     15            *
     16            * Redistribution and use in source and binary forms, with or without 
     17            * modification, are permitted, provided that the following conditions are met:
     18            *
     19            * 1. Redistribution of source code must retain the above copyright notice, 
     20            *    this list of conditions and the following disclaimer.
     21            * 2. Redistributions in binary form must reproduce the above copyright notice,
     22            *    this list of conditions and the following disclaimer in the documentation
     23            *    and/or other materials provided with the distribution.
     24            * 3. Neither the name of STMicroelectronics nor the names of other 
     25            *    contributors to this software may be used to endorse or promote products 
     26            *    derived from this software without specific written permission.
     27            * 4. This software, including modifications and/or derivative works of this 
     28            *    software, must execute solely and exclusively on microcontroller or
     29            *    microprocessor devices manufactured by or for STMicroelectronics.
     30            * 5. Redistribution and use of this software other than as permitted under 
     31            *    this license is void and will automatically terminate your rights under 
     32            *    this license. 
     33            *
     34            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     35            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     36            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     37            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     38            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     39            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     40            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     41            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     42            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     43            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     44            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     45            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     46            *
     47            ******************************************************************************
     48            */
     49          /* Includes ------------------------------------------------------------------*/
     50          #include "main.h"

  /**
    ^
"D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_adc.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetPriorityGrouping(void)
   \                     NVIC_GetPriorityGrouping:
   \   00000000   0x....             LDR.N    R0,??DataTable17  ;; 0xe000ed0c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000006   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000008   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000000C   0x....             LDR.N    R2,??DataTable17_1  ;; 0xe000ed18
   \   0000000E   0x1880             ADDS     R0,R0,R2
   \   00000010   0x0109             LSLS     R1,R1,#+4
   \   00000012   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \   00000016   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0:
   \   00000018   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001A   0x....             LDR.N    R2,??DataTable17_2  ;; 0xe000e400
   \   0000001C   0x0109             LSLS     R1,R1,#+4
   \   0000001E   0x5481             STRB     R1,[R0, R2]
   \                     ??NVIC_SetPriority_1:
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000006   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \   0000000A   0x2B05             CMP      R3,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \   0000000E   0x2304             MOVS     R3,#+4
   \   00000010   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0:
   \   00000012   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1:
   \   00000016   0x1D04             ADDS     R4,R0,#+4
   \   00000018   0x2C07             CMP      R4,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2:
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3:
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xFA14 0xF303      LSLS     R3,R4,R3
   \   00000028   0x1E5B             SUBS     R3,R3,#+1
   \   0000002A   0x4019             ANDS     R1,R3,R1
   \   0000002C   0x4081             LSLS     R1,R1,R0
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0xBC10             POP      {R4}
   \   0000003C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_ADC_Enable(ADC_TypeDef *)
   \                     LL_ADC_Enable:
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000006   0x6081             STR      R1,[R0, #+8]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *, uint32_t)
   \                     LL_ADC_REG_StartConversionExtTrig:
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4311             ORRS     R1,R1,R2
   \   00000004   0x6081             STR      R1,[R0, #+8]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_ADC_EnableIT_EOS(ADC_TypeDef *)
   \                     LL_ADC_EnableIT_EOS:
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   00000006   0x6041             STR      R1,[R0, #+4]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_HSE_Enable(void)
   \                     LL_RCC_HSE_Enable:
   \   00000000   0x....             LDR.N    R0,??DataTable17_3  ;; 0x40021000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000008   0x....             LDR.N    R1,??DataTable17_3  ;; 0x40021000
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_RCC_HSE_IsReady(void)
   \                     LL_RCC_HSE_IsReady:
   \   00000000   0x....             LDR.N    R0,??DataTable17_3  ;; 0x40021000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x4040      UBFX     R0,R0,#+17,#+1
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_SetSysClkSource(uint32_t)
   \                     LL_RCC_SetSysClkSource:
   \   00000000   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x0889             LSRS     R1,R1,#+2
   \   00000006   0x0089             LSLS     R1,R1,#+2
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_RCC_GetSysClkSource(void)
   \                     LL_RCC_GetSysClkSource:
   \   00000000   0x....             LDR.N    R0,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_SetAHBPrescaler(uint32_t)
   \                     LL_RCC_SetAHBPrescaler:
   \   00000000   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF031 0x01F0      BICS     R1,R1,#0xF0
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_SetAPB1Prescaler(uint32_t)
   \                     LL_RCC_SetAPB1Prescaler:
   \   00000000   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF431 0x61E0      BICS     R1,R1,#0x700
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_SetAPB2Prescaler(uint32_t)
   \                     LL_RCC_SetAPB2Prescaler:
   \   00000000   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF431 0x5160      BICS     R1,R1,#0x3800
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_SetADCClockSource(uint32_t)
   \                     LL_RCC_SetADCClockSource:
   \   00000000   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF431 0x4140      BICS     R1,R1,#0xC000
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_PLL_Enable(void)
   \                     LL_RCC_PLL_Enable:
   \   00000000   0x....             LDR.N    R0,??DataTable17_3  ;; 0x40021000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000008   0x....             LDR.N    R1,??DataTable17_3  ;; 0x40021000
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_RCC_PLL_IsReady(void)
   \                     LL_RCC_PLL_IsReady:
   \   00000000   0x....             LDR.N    R0,??DataTable17_3  ;; 0x40021000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x6040      UBFX     R0,R0,#+25,#+1
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_RCC_PLL_ConfigDomain_SYS(uint32_t, uint32_t)
   \                     LL_RCC_PLL_ConfigDomain_SYS:
   \   00000000   0x....             LDR.N    R2,??DataTable17_4  ;; 0x40021004
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0xF432 0x127C      BICS     R2,R2,#0x3F0000
   \   00000008   0xF410 0x3040      ANDS     R0,R0,#0x30000
   \   0000000C   0x4310             ORRS     R0,R0,R2
   \   0000000E   0x4308             ORRS     R0,R1,R0
   \   00000010   0x....             LDR.N    R1,??DataTable17_4  ;; 0x40021004
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_FLASH_SetLatency(uint32_t)
   \                     LL_FLASH_SetLatency:
   \   00000000   0x....             LDR.N    R1,??DataTable17_5  ;; 0x40022000
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x08C9             LSRS     R1,R1,#+3
   \   00000006   0x00C9             LSLS     R1,R1,#+3
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable17_5  ;; 0x40022000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_FLASH_GetLatency(void)
   \                     LL_FLASH_GetLatency:
   \   00000000   0x....             LDR.N    R0,??DataTable17_5  ;; 0x40022000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SYSTICK_SetClkSource(uint32_t)
   \                     LL_SYSTICK_SetClkSource:
   \   00000000   0x2804             CMP      R0,#+4
   \   00000002   0xD106             BNE.N    ??LL_SYSTICK_SetClkSource_0
   \   00000004   0x....             LDR.N    R0,??DataTable17_6  ;; 0xe000e010
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000000C   0x....             LDR.N    R1,??DataTable17_6  ;; 0xe000e010
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0xE005             B.N      ??LL_SYSTICK_SetClkSource_1
   \                     ??LL_SYSTICK_SetClkSource_0:
   \   00000012   0x....             LDR.N    R0,??DataTable17_6  ;; 0xe000e010
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000001A   0x....             LDR.N    R1,??DataTable17_6  ;; 0xe000e010
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \                     ??LL_SYSTICK_SetClkSource_1:
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_TIM_EnableCounter(TIM_TypeDef *)
   \                     LL_TIM_EnableCounter:
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \   00000008   0x4770             BX       LR               ;; return
     51          #include "stm32f1xx_hal.h"
     52          #include "cmsis_os.h"
     53          #include "adc.h"
     54          #include "tim.h"
     55          #include "usart.h"
     56          #include "gpio.h"
     57          
     58          /* USER CODE BEGIN Includes */
     59          
     60          #include "hw_config.h"
     61          
     62          /* USER CODE END Includes */
     63          
     64          /* Private variables ---------------------------------------------------------*/
     65          
     66          /* USER CODE BEGIN PV */
     67          /* Private variables ---------------------------------------------------------*/
     68          
     69          /* USER CODE END PV */
     70          
     71          /* Private function prototypes -----------------------------------------------*/
     72          void SystemClock_Config(void);
     73          void MX_FREERTOS_Init(void);
     74          
     75          /* USER CODE BEGIN PFP */
     76          /* Private function prototypes -----------------------------------------------*/
     77          
     78          /* USER CODE END PFP */
     79          
     80          /* USER CODE BEGIN 0 */
     81          
     82          /* USER CODE END 0 */
     83          
     84          /**
     85            * @brief  The application entry point.
     86            *
     87            * @retval None
     88            */

   \                                 In section .text, align 2, keep-with-next
     89          int main(void)
     90          {
   \                     main:
   \   00000000   0xB580             PUSH     {R7,LR}
     91            /* USER CODE BEGIN 1 */
     92          
     93            /* USER CODE END 1 */
     94          
     95            /* MCU Configuration----------------------------------------------------------*/
     96          
     97            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     98            HAL_Init();
   \   00000002   0x.... 0x....      BL       HAL_Init
     99          
    100            /* USER CODE BEGIN Init */
    101          
    102            /* USER CODE END Init */
    103          
    104            /* Configure the system clock */
    105            SystemClock_Config();
   \   00000006   0x.... 0x....      BL       SystemClock_Config
    106          
    107            /* USER CODE BEGIN SysInit */
    108          
    109            /* USER CODE END SysInit */
    110          
    111            /* Initialize all configured peripherals */
    112            MX_GPIO_Init();
   \   0000000A   0x.... 0x....      BL       MX_GPIO_Init
    113            MX_ADC1_Init();
   \   0000000E   0x.... 0x....      BL       MX_ADC1_Init
    114            MX_TIM1_Init();
   \   00000012   0x.... 0x....      BL       MX_TIM1_Init
    115            MX_USART1_UART_Init();
   \   00000016   0x.... 0x....      BL       MX_USART1_UART_Init
    116            MX_TIM3_Init();
   \   0000001A   0x.... 0x....      BL       MX_TIM3_Init
    117            /* USER CODE BEGIN 2 */
    118            LL_ADC_Enable(usedADC); 
   \   0000001E   0x....             LDR.N    R0,??DataTable17_7  ;; 0x40012400
   \   00000020   0x.... 0x....      BL       LL_ADC_Enable
    119            ADC_Calibrate(usedADC); ///> calibrating ADC
   \   00000024   0x....             LDR.N    R0,??DataTable17_7  ;; 0x40012400
   \   00000026   0x.... 0x....      BL       ADC_Calibrate
    120            LL_ADC_REG_StartConversionExtTrig(usedADC, LL_ADC_REG_TRIG_EXT_RISING); ///> ADC starts conversion by external triger (adcTIM)
   \   0000002A   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000002E   0x....             LDR.N    R0,??DataTable17_7  ;; 0x40012400
   \   00000030   0x.... 0x....      BL       LL_ADC_REG_StartConversionExtTrig
    121            LL_ADC_EnableIT_EOS(usedADC); ///> enabling interrupt
   \   00000034   0x....             LDR.N    R0,??DataTable17_7  ;; 0x40012400
   \   00000036   0x.... 0x....      BL       LL_ADC_EnableIT_EOS
    122            
    123            LL_TIM_EnableCounter(adcTimer);
   \   0000003A   0x....             LDR.N    R0,??DataTable17_8  ;; 0x40000400
   \   0000003C   0x.... 0x....      BL       LL_TIM_EnableCounter
    124            /* USER CODE END 2 */
    125          
    126            /* Call init function for freertos objects (in freertos.c) */
    127            MX_FREERTOS_Init();
   \   00000040   0x.... 0x....      BL       MX_FREERTOS_Init
    128          
    129            /* Start scheduler */
    130            osKernelStart();
   \   00000044   0x.... 0x....      BL       osKernelStart
    131            
    132            /* We should never get here as control is now taken by the scheduler */
    133          
    134            /* Infinite loop */
    135            /* USER CODE BEGIN WHILE */
    136            while (1)
   \                     ??main_0:
   \   00000048   0xE7FE             B.N      ??main_0
    137            {
    138          
    139            /* USER CODE END WHILE */
    140          
    141            /* USER CODE BEGIN 3 */
    142          
    143            }
    144            /* USER CODE END 3 */
    145          
    146          }
    147          
    148          /**
    149            * @brief System Clock Configuration
    150            * @retval None
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          void SystemClock_Config(void)
    153          {
   \                     SystemClock_Config:
   \   00000000   0xB580             PUSH     {R7,LR}
    154          
    155            LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       LL_FLASH_SetLatency
    156          
    157             if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
   \   00000008   0x.... 0x....      BL       LL_FLASH_GetLatency
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD003             BEQ.N    ??SystemClock_Config_0
    158            {
    159              Error_Handler();  
   \   00000010   0x219F             MOVS     R1,#+159
   \   00000012   0x....             LDR.N    R0,??DataTable17_9
   \   00000014   0x.... 0x....      BL       _Error_Handler
    160            }
    161            LL_RCC_HSE_Enable();
   \                     ??SystemClock_Config_0:
   \   00000018   0x.... 0x....      BL       LL_RCC_HSE_Enable
    162          
    163             /* Wait till HSE is ready */
    164            while(LL_RCC_HSE_IsReady() != 1)
   \                     ??SystemClock_Config_1:
   \   0000001C   0x.... 0x....      BL       LL_RCC_HSE_IsReady
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD1FB             BNE.N    ??SystemClock_Config_1
    165            {
    166              
    167            }
    168            LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
   \   00000024   0xF45F 0x11E0      MOVS     R1,#+1835008
   \   00000028   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000002C   0x.... 0x....      BL       LL_RCC_PLL_ConfigDomain_SYS
    169          
    170            LL_RCC_PLL_Enable();
   \   00000030   0x.... 0x....      BL       LL_RCC_PLL_Enable
    171          
    172             /* Wait till PLL is ready */
    173            while(LL_RCC_PLL_IsReady() != 1)
   \                     ??SystemClock_Config_2:
   \   00000034   0x.... 0x....      BL       LL_RCC_PLL_IsReady
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD1FB             BNE.N    ??SystemClock_Config_2
    174            {
    175              
    176            }
    177            LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       LL_RCC_SetAHBPrescaler
    178          
    179            LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
   \   00000042   0xF44F 0x6080      MOV      R0,#+1024
   \   00000046   0x.... 0x....      BL       LL_RCC_SetAPB1Prescaler
    180          
    181            LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       LL_RCC_SetAPB2Prescaler
    182          
    183            LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x.... 0x....      BL       LL_RCC_SetSysClkSource
    184          
    185             /* Wait till System clock is ready */
    186            while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
   \                     ??SystemClock_Config_3:
   \   00000056   0x.... 0x....      BL       LL_RCC_GetSysClkSource
   \   0000005A   0x2808             CMP      R0,#+8
   \   0000005C   0xD1FB             BNE.N    ??SystemClock_Config_3
    187            {
    188            
    189            }
    190            LL_Init1msTick(72000000);
   \   0000005E   0x....             LDR.N    R0,??DataTable17_10  ;; 0x44aa200
   \   00000060   0x.... 0x....      BL       LL_Init1msTick
    191          
    192            LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x.... 0x....      BL       LL_SYSTICK_SetClkSource
    193          
    194            LL_SetSystemCoreClock(72000000);
   \   0000006A   0x....             LDR.N    R0,??DataTable17_10  ;; 0x44aa200
   \   0000006C   0x.... 0x....      BL       LL_SetSystemCoreClock
    195          
    196            LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_8);
   \   00000070   0xF44F 0x4040      MOV      R0,#+49152
   \   00000074   0x.... 0x....      BL       LL_RCC_SetADCClockSource
    197          
    198            /* SysTick_IRQn interrupt configuration */
    199            NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
   \   00000078   0x.... 0x....      BL       NVIC_GetPriorityGrouping
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x210F             MOVS     R1,#+15
   \   00000080   0x.... 0x....      BL       NVIC_EncodePriority
   \   00000084   0x0001             MOVS     R1,R0
   \   00000086   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000008A   0x.... 0x....      BL       NVIC_SetPriority
    200          }
   \   0000008E   0xBD01             POP      {R0,PC}          ;; return
    201          
    202          /* USER CODE BEGIN 4 */
    203          
    204          /* USER CODE END 4 */
    205          
    206          /**
    207            * @brief  Period elapsed callback in non blocking mode
    208            * @note   This function is called  when TIM2 interrupt took place, inside
    209            * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
    210            * a global variable "uwTick" used as application time base.
    211            * @param  htim : TIM handle
    212            * @retval None
    213            */

   \                                 In section .text, align 2, keep-with-next
    214          void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    215          {
   \                     HAL_TIM_PeriodElapsedCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
    216            /* USER CODE BEGIN Callback 0 */
    217          
    218            /* USER CODE END Callback 0 */
    219            if (htim->Instance == TIM2) {
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   00000008   0xD101             BNE.N    ??HAL_TIM_PeriodElapsedCallback_0
    220              HAL_IncTick();
   \   0000000A   0x.... 0x....      BL       HAL_IncTick
    221            }
    222            /* USER CODE BEGIN Callback 1 */
    223          
    224            /* USER CODE END Callback 1 */
    225          }
   \                     ??HAL_TIM_PeriodElapsedCallback_0:
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    226          
    227          /**
    228            * @brief  This function is executed in case of error occurrence.
    229            * @param  file: The file name as string.
    230            * @param  line: The line in file as a number.
    231            * @retval None
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          void _Error_Handler(char *file, int line)
    234          {
    235            /* USER CODE BEGIN Error_Handler_Debug */
    236            /* User can add his own implementation to report the HAL error return state */
    237            while(1)
   \                     _Error_Handler:
   \                     ??_Error_Handler_0:
   \   00000000   0xE7FE             B.N      ??_Error_Handler_0
    238            {
    239            }
    240            /* USER CODE END Error_Handler_Debug */
    241          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x40021004         DC32     0x40021004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     `?<Constant "D:\\\\projects\\\\\\347\\340\\344\\340\\355`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x044AA200         DC32     0x44aa200

   \                                 In section .rodata, align 4
   \                     `?<Constant "D:\\\\projects\\\\\\347\\340\\344\\340\\355`:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 70H, 72H, 6FH, 6AH, 65H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x6A 0x65    
   \   00000008   0x63 0x74          DC8 63H, 74H, 73H, 5CH, 0E7H, 0E0H, 0E4H, 0E0H
   \              0x73 0x5C    
   \              0xE7 0xE0    
   \              0xE4 0xE0    
   \   00000010   0xED 0xE8          DC8 0EDH, 0E8H, 0FFH, 20H, 0EEH, 0F2H, 20H, 0F0H
   \              0xFF 0x20    
   \              0xEE 0xF2    
   \              0x20 0xF0    
   \   00000018   0xE0 0xE1          DC8 0E0H, 0E1H, 0EEH, 0F2H, 0EEH, 0E4H, 0E0H, 0F2H
   \              0xEE 0xF2    
   \              0xEE 0xE4    
   \              0xE0 0xF2    
   \   00000020   0xE5 0xEB          DC8 0E5H, 0EBH, 0FFH, 5CH, 0DDH, 0CCH, 0C8H, 0D1H
   \              0xFF 0x5C    
   \              0xDD 0xCC    
   \              0xC8 0xD1    
   \   00000028   0x5C 0x53          DC8 5CH, 53H, 72H, 63H, 5CH, 6DH, 61H, 69H, 6EH, 2EH, 63H, 0
   \              0x72 0x63    
   \              0x5C 0x6D    
   \              0x61 0x69    
   \              0x6E 0x2E    
   \              0x63 0x00    
    242          
    243          #ifdef  USE_FULL_ASSERT
    244          /**
    245            * @brief  Reports the name of the source file and the source line number
    246            *         where the assert_param error has occurred.
    247            * @param  file: pointer to the source file name
    248            * @param  line: assert_param error line source number
    249            * @retval None
    250            */
    251          void assert_failed(uint8_t* file, uint32_t line)
    252          { 
    253            /* USER CODE BEGIN 6 */
    254            /* User can add his own implementation to report the file name and line number,
    255               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    256            /* USER CODE END 6 */
    257          }
    258          #endif /* USE_FULL_ASSERT */
    259          
    260          /**
    261            * @}
    262            */
    263          
    264          /**
    265            * @}
    266            */
    267          
    268          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  HAL_TIM_PeriodElapsedCallback
             8 -> HAL_IncTick
        0  LL_ADC_Enable
        0  LL_ADC_EnableIT_EOS
        0  LL_ADC_REG_StartConversionExtTrig
        0  LL_FLASH_GetLatency
        0  LL_FLASH_SetLatency
        0  LL_RCC_GetSysClkSource
        0  LL_RCC_HSE_Enable
        0  LL_RCC_HSE_IsReady
        0  LL_RCC_PLL_ConfigDomain_SYS
        0  LL_RCC_PLL_Enable
        0  LL_RCC_PLL_IsReady
        0  LL_RCC_SetADCClockSource
        0  LL_RCC_SetAHBPrescaler
        0  LL_RCC_SetAPB1Prescaler
        0  LL_RCC_SetAPB2Prescaler
        0  LL_RCC_SetSysClkSource
        0  LL_SYSTICK_SetClkSource
        0  LL_TIM_EnableCounter
        4  NVIC_EncodePriority
        0  NVIC_GetPriorityGrouping
        0  NVIC_SetPriority
        8  SystemClock_Config
             8 -> LL_FLASH_GetLatency
             8 -> LL_FLASH_SetLatency
             8 -> LL_Init1msTick
             8 -> LL_RCC_GetSysClkSource
             8 -> LL_RCC_HSE_Enable
             8 -> LL_RCC_HSE_IsReady
             8 -> LL_RCC_PLL_ConfigDomain_SYS
             8 -> LL_RCC_PLL_Enable
             8 -> LL_RCC_PLL_IsReady
             8 -> LL_RCC_SetADCClockSource
             8 -> LL_RCC_SetAHBPrescaler
             8 -> LL_RCC_SetAPB1Prescaler
             8 -> LL_RCC_SetAPB2Prescaler
             8 -> LL_RCC_SetSysClkSource
             8 -> LL_SYSTICK_SetClkSource
             8 -> LL_SetSystemCoreClock
             8 -> NVIC_EncodePriority
             8 -> NVIC_GetPriorityGrouping
             8 -> NVIC_SetPriority
             8 -> _Error_Handler
        0  _Error_Handler
        8  main
             8 -> ADC_Calibrate
             8 -> HAL_Init
             8 -> LL_ADC_Enable
             8 -> LL_ADC_EnableIT_EOS
             8 -> LL_ADC_REG_StartConversionExtTrig
             8 -> LL_TIM_EnableCounter
             8 -> MX_ADC1_Init
             8 -> MX_FREERTOS_Init
             8 -> MX_GPIO_Init
             8 -> MX_TIM1_Init
             8 -> MX_TIM3_Init
             8 -> MX_USART1_UART_Init
             8 -> SystemClock_Config
             8 -> osKernelStart


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  ?<Constant "D:\\projects\\\347\340\344\340\355
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
      16  HAL_TIM_PeriodElapsedCallback
      10  LL_ADC_Enable
      10  LL_ADC_EnableIT_EOS
       8  LL_ADC_REG_StartConversionExtTrig
      10  LL_FLASH_GetLatency
      16  LL_FLASH_SetLatency
      10  LL_RCC_GetSysClkSource
      14  LL_RCC_HSE_Enable
      14  LL_RCC_HSE_IsReady
      22  LL_RCC_PLL_ConfigDomain_SYS
      14  LL_RCC_PLL_Enable
      14  LL_RCC_PLL_IsReady
      16  LL_RCC_SetADCClockSource
      16  LL_RCC_SetAHBPrescaler
      16  LL_RCC_SetAPB1Prescaler
      16  LL_RCC_SetAPB2Prescaler
      16  LL_RCC_SetSysClkSource
      32  LL_SYSTICK_SetClkSource
      10  LL_TIM_EnableCounter
      62  NVIC_EncodePriority
      10  NVIC_GetPriorityGrouping
      34  NVIC_SetPriority
     144  SystemClock_Config
       2  _Error_Handler
      74  main

 
  52 bytes in section .rodata
 650 bytes in section .text
 
 650 bytes of CODE  memory
  52 bytes of CONST memory

Errors: none
Warnings: 1
