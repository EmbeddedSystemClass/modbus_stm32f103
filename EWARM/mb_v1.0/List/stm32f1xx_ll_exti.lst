###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  06:15:46 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1 #
#                    xx_HAL_Driver\Src\stm32f1xx_ll_exti.c                    #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F #
#                    1xx_HAL_Driver\Src\stm32f1xx_ll_exti.c" -D               #
#                    USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F103xB -lC  #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    List\" -o "D:\projects\задания от                        #
#                    работодателя\ЭМИС\EWARM\mb_v1.0/Obj\" --no_cse           #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\stm32f1xx_ll_exti.lst                                #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\stm32f1xx_ll_exti.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_exti.c
      1          /**
                   ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2            ******************************************************************************
      3            * @file    stm32f1xx_ll_exti.c
      4            * @author  MCD Application Team
      5            * @brief   EXTI LL module driver.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          #if defined(USE_FULL_LL_DRIVER)
     36          
     37          /* Includes ------------------------------------------------------------------*/
     38          #include "stm32f1xx_ll_exti.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_EnableIT_0_31(uint32_t)
   \                     LL_EXTI_EnableIT_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8  ;; 0x40010400
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4308             ORRS     R0,R0,R1
   \   00000006   0x....             LDR.N    R1,??DataTable8  ;; 0x40010400
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_DisableIT_0_31(uint32_t)
   \                     LL_EXTI_DisableIT_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8  ;; 0x40010400
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xEA31 0x0000      BICS     R0,R1,R0
   \   00000008   0x....             LDR.N    R1,??DataTable8  ;; 0x40010400
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_EnableEvent_0_31(uint32_t)
   \                     LL_EXTI_EnableEvent_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8_1  ;; 0x40010404
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4308             ORRS     R0,R0,R1
   \   00000006   0x....             LDR.N    R1,??DataTable8_1  ;; 0x40010404
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_DisableEvent_0_31(uint32_t)
   \                     LL_EXTI_DisableEvent_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8_1  ;; 0x40010404
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xEA31 0x0000      BICS     R0,R1,R0
   \   00000008   0x....             LDR.N    R1,??DataTable8_1  ;; 0x40010404
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_EnableRisingTrig_0_31(uint32_t)
   \                     LL_EXTI_EnableRisingTrig_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40010408
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4308             ORRS     R0,R0,R1
   \   00000006   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40010408
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_DisableRisingTrig_0_31(uint32_t)
   \                     LL_EXTI_DisableRisingTrig_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40010408
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xEA31 0x0000      BICS     R0,R1,R0
   \   00000008   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40010408
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_EnableFallingTrig_0_31(uint32_t)
   \                     LL_EXTI_EnableFallingTrig_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8_3  ;; 0x4001040c
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4308             ORRS     R0,R0,R1
   \   00000006   0x....             LDR.N    R1,??DataTable8_3  ;; 0x4001040c
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_EXTI_DisableFallingTrig_0_31(uint32_t)
   \                     LL_EXTI_DisableFallingTrig_0_31:
   \   00000000   0x....             LDR.N    R1,??DataTable8_3  ;; 0x4001040c
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xEA31 0x0000      BICS     R0,R1,R0
   \   00000008   0x....             LDR.N    R1,??DataTable8_3  ;; 0x4001040c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR               ;; return
     39          #ifdef  USE_FULL_ASSERT
     40          #include "stm32_assert.h"
     41          #else
     42          #define assert_param(expr) ((void)0U)
     43          #endif
     44          
     45          /** @addtogroup STM32F1xx_LL_Driver
     46            * @{
     47            */
     48          
     49          #if defined (EXTI)
     50          
     51          /** @defgroup EXTI_LL EXTI
     52            * @{
     53            */
     54          
     55          /* Private types -------------------------------------------------------------*/
     56          /* Private variables ---------------------------------------------------------*/
     57          /* Private constants ---------------------------------------------------------*/
     58          /* Private macros ------------------------------------------------------------*/
     59          /** @addtogroup EXTI_LL_Private_Macros
     60            * @{
     61            */
     62          
     63          #define IS_LL_EXTI_LINE_0_31(__VALUE__)              (((__VALUE__) & ~LL_EXTI_LINE_ALL_0_31) == 0x00000000U)
     64          
     65          #define IS_LL_EXTI_MODE(__VALUE__)                   (((__VALUE__) == LL_EXTI_MODE_IT)            \
     66                                                             || ((__VALUE__) == LL_EXTI_MODE_EVENT)         \
     67                                                             || ((__VALUE__) == LL_EXTI_MODE_IT_EVENT))
     68          
     69          
     70          #define IS_LL_EXTI_TRIGGER(__VALUE__)                (((__VALUE__) == LL_EXTI_TRIGGER_NONE)       \
     71                                                             || ((__VALUE__) == LL_EXTI_TRIGGER_RISING)     \
     72                                                             || ((__VALUE__) == LL_EXTI_TRIGGER_FALLING)    \
     73                                                             || ((__VALUE__) == LL_EXTI_TRIGGER_RISING_FALLING))
     74          
     75          /**
     76            * @}
     77            */
     78          
     79          /* Private function prototypes -----------------------------------------------*/
     80          
     81          /* Exported functions --------------------------------------------------------*/
     82          /** @addtogroup EXTI_LL_Exported_Functions
     83            * @{
     84            */
     85          
     86          /** @addtogroup EXTI_LL_EF_Init
     87            * @{
     88            */
     89          
     90          /**
     91            * @brief  De-initialize the EXTI registers to their default reset values.
     92            * @retval An ErrorStatus enumeration value:
     93            *          - SUCCESS: EXTI registers are de-initialized
     94            *          - ERROR: not applicable
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          uint32_t LL_EXTI_DeInit(void)
     97          {
     98            /* Interrupt mask register set to default reset values */
     99            LL_EXTI_WriteReg(IMR,   0x00000000U);
   \                     LL_EXTI_DeInit:
   \   00000000   0x....             LDR.N    R0,??DataTable8  ;; 0x40010400
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    100            /* Event mask register set to default reset values */
    101            LL_EXTI_WriteReg(EMR,   0x00000000U);
   \   00000006   0x....             LDR.N    R0,??DataTable8_1  ;; 0x40010404
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    102            /* Rising Trigger selection register set to default reset values */
    103            LL_EXTI_WriteReg(RTSR,  0x00000000U);
   \   0000000C   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40010408
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6001             STR      R1,[R0, #+0]
    104            /* Falling Trigger selection register set to default reset values */
    105            LL_EXTI_WriteReg(FTSR,  0x00000000U);
   \   00000012   0x....             LDR.N    R0,??DataTable8_3  ;; 0x4001040c
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6001             STR      R1,[R0, #+0]
    106            /* Software interrupt event register set to default reset values */
    107            LL_EXTI_WriteReg(SWIER, 0x00000000U);
   \   00000018   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40010410
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    108            /* Pending register clear */
    109            LL_EXTI_WriteReg(PR,    0x000FFFFFU);
   \   0000001E   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40010414
   \   00000020   0x....             LDR.N    R1,??DataTable8_6  ;; 0xfffff
   \   00000022   0x6001             STR      R1,[R0, #+0]
    110          
    111            return SUCCESS;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x4770             BX       LR               ;; return
    112          }
    113          
    114          /**
    115            * @brief  Initialize the EXTI registers according to the specified parameters in EXTI_InitStruct.
    116            * @param  EXTI_InitStruct pointer to a @ref LL_EXTI_InitTypeDef structure.
    117            * @retval An ErrorStatus enumeration value:
    118            *          - SUCCESS: EXTI registers are initialized
    119            *          - ERROR: not applicable
    120            */

   \                                 In section .text, align 2, keep-with-next
    121          uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
    122          {
   \                     LL_EXTI_Init:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    123            ErrorStatus status = SUCCESS;
   \   00000004   0x2501             MOVS     R5,#+1
    124            /* Check the parameters */
    125            assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
    126            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
    127            assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
    128          
    129            /* ENABLE LineCommand */
    130            if (EXTI_InitStruct->LineCommand != DISABLE)
   \   00000006   0x7920             LDRB     R0,[R4, #+4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD041             BEQ.N    ??LL_EXTI_Init_0
    131            {
    132              assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
    133          
    134              /* Configure EXTI Lines in range from 0 to 31 */
    135              if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD044             BEQ.N    ??LL_EXTI_Init_1
    136              {
    137                switch (EXTI_InitStruct->Mode)
   \   00000012   0x7960             LDRB     R0,[R4, #+5]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??LL_EXTI_Init_2
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD00F             BEQ.N    ??LL_EXTI_Init_3
   \   0000001C   0xD307             BCC.N    ??LL_EXTI_Init_4
   \   0000001E   0xE014             B.N      ??LL_EXTI_Init_5
    138                {
    139                  case LL_EXTI_MODE_IT:
    140                    /* First Disable Event on provided Lines */
    141                    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_2:
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x.... 0x....      BL       LL_EXTI_DisableEvent_0_31
    142                    /* Then Enable IT on provided Lines */
    143                    LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x.... 0x....      BL       LL_EXTI_EnableIT_0_31
    144                    break;
   \   0000002C   0xE00E             B.N      ??LL_EXTI_Init_6
    145                  case LL_EXTI_MODE_EVENT:
    146                    /* First Disable IT on provided Lines */
    147                    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_4:
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x.... 0x....      BL       LL_EXTI_DisableIT_0_31
    148                    /* Then Enable Event on provided Lines */
    149                    LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x.... 0x....      BL       LL_EXTI_EnableEvent_0_31
    150                    break;
   \   0000003A   0xE007             B.N      ??LL_EXTI_Init_6
    151                  case LL_EXTI_MODE_IT_EVENT:
    152                    /* Directly Enable IT & Event on provided Lines */
    153                    LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_3:
   \   0000003C   0x6820             LDR      R0,[R4, #+0]
   \   0000003E   0x.... 0x....      BL       LL_EXTI_EnableIT_0_31
    154                    LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x.... 0x....      BL       LL_EXTI_EnableEvent_0_31
    155                    break;
   \   00000048   0xE000             B.N      ??LL_EXTI_Init_6
    156                  default:
    157                    status = ERROR;
   \                     ??LL_EXTI_Init_5:
   \   0000004A   0x2500             MOVS     R5,#+0
    158                    break;
    159                }
    160                if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
   \                     ??LL_EXTI_Init_6:
   \   0000004C   0x79A0             LDRB     R0,[R4, #+6]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD024             BEQ.N    ??LL_EXTI_Init_1
    161                {
    162                  switch (EXTI_InitStruct->Trigger)
   \   00000052   0x79A0             LDRB     R0,[R4, #+6]
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD004             BEQ.N    ??LL_EXTI_Init_7
   \   00000058   0xD318             BCC.N    ??LL_EXTI_Init_8
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xD00F             BEQ.N    ??LL_EXTI_Init_9
   \   0000005E   0xD307             BCC.N    ??LL_EXTI_Init_10
   \   00000060   0xE014             B.N      ??LL_EXTI_Init_8
    163                  {
    164                    case LL_EXTI_TRIGGER_RISING:
    165                      /* First Disable Falling Trigger on provided Lines */
    166                      LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_7:
   \   00000062   0x6820             LDR      R0,[R4, #+0]
   \   00000064   0x.... 0x....      BL       LL_EXTI_DisableFallingTrig_0_31
    167                      /* Then Enable Rising Trigger on provided Lines */
    168                      LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \   00000068   0x6820             LDR      R0,[R4, #+0]
   \   0000006A   0x.... 0x....      BL       LL_EXTI_EnableRisingTrig_0_31
    169                      break;
   \   0000006E   0xE015             B.N      ??LL_EXTI_Init_1
    170                    case LL_EXTI_TRIGGER_FALLING:
    171                      /* First Disable Rising Trigger on provided Lines */
    172                      LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_10:
   \   00000070   0x6820             LDR      R0,[R4, #+0]
   \   00000072   0x.... 0x....      BL       LL_EXTI_DisableRisingTrig_0_31
    173                      /* Then Enable Falling Trigger on provided Lines */
    174                      LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0x.... 0x....      BL       LL_EXTI_EnableFallingTrig_0_31
    175                      break;
   \   0000007C   0xE00E             B.N      ??LL_EXTI_Init_1
    176                    case LL_EXTI_TRIGGER_RISING_FALLING:
    177                      LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_9:
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0x.... 0x....      BL       LL_EXTI_EnableRisingTrig_0_31
    178                      LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \   00000084   0x6820             LDR      R0,[R4, #+0]
   \   00000086   0x.... 0x....      BL       LL_EXTI_EnableFallingTrig_0_31
    179                      break;
   \   0000008A   0xE007             B.N      ??LL_EXTI_Init_1
    180                    default:
    181                      status = ERROR;
   \                     ??LL_EXTI_Init_8:
   \   0000008C   0x2500             MOVS     R5,#+0
    182                      break;
   \   0000008E   0xE005             B.N      ??LL_EXTI_Init_1
    183                  }
    184                }
    185              }
    186            }
    187            /* DISABLE LineCommand */
    188            else
    189            {
    190              /* De-configure EXTI Lines in range from 0 to 31 */
    191              LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_0:
   \   00000090   0x6820             LDR      R0,[R4, #+0]
   \   00000092   0x.... 0x....      BL       LL_EXTI_DisableIT_0_31
    192              LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \   00000096   0x6820             LDR      R0,[R4, #+0]
   \   00000098   0x.... 0x....      BL       LL_EXTI_DisableEvent_0_31
    193            }
    194            return status;
   \                     ??LL_EXTI_Init_1:
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x0028             MOVS     R0,R5
   \   000000A0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    195          }
    196          
    197          /**
    198            * @brief  Set each @ref LL_EXTI_InitTypeDef field to default value.
    199            * @param  EXTI_InitStruct Pointer to a @ref LL_EXTI_InitTypeDef structure.
    200            * @retval None
    201            */

   \                                 In section .text, align 2, keep-with-next
    202          void LL_EXTI_StructInit(LL_EXTI_InitTypeDef *EXTI_InitStruct)
    203          {
    204            EXTI_InitStruct->Line_0_31      = LL_EXTI_LINE_NONE;
   \                     LL_EXTI_StructInit:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    205            EXTI_InitStruct->LineCommand    = DISABLE;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7101             STRB     R1,[R0, #+4]
    206            EXTI_InitStruct->Mode           = LL_EXTI_MODE_IT;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7141             STRB     R1,[R0, #+5]
    207            EXTI_InitStruct->Trigger        = LL_EXTI_TRIGGER_FALLING;
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x7181             STRB     R1,[R0, #+6]
    208          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x40010404         DC32     0x40010404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x40010408         DC32     0x40010408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4001040C         DC32     0x4001040c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40010410         DC32     0x40010410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40010414         DC32     0x40010414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x000FFFFF         DC32     0xfffff
    209          
    210          /**
    211            * @}
    212            */
    213          
    214          /**
    215            * @}
    216            */
    217          
    218          /**
    219            * @}
    220            */
    221          
    222          #endif /* defined (EXTI) */
    223          
    224          /**
    225            * @}
    226            */
    227          
    228          #endif /* USE_FULL_LL_DRIVER */
    229          
    230          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LL_EXTI_DeInit
        0  LL_EXTI_DisableEvent_0_31
        0  LL_EXTI_DisableFallingTrig_0_31
        0  LL_EXTI_DisableIT_0_31
        0  LL_EXTI_DisableRisingTrig_0_31
        0  LL_EXTI_EnableEvent_0_31
        0  LL_EXTI_EnableFallingTrig_0_31
        0  LL_EXTI_EnableIT_0_31
        0  LL_EXTI_EnableRisingTrig_0_31
       16  LL_EXTI_Init
             16 -> LL_EXTI_DisableEvent_0_31
             16 -> LL_EXTI_DisableFallingTrig_0_31
             16 -> LL_EXTI_DisableIT_0_31
             16 -> LL_EXTI_DisableRisingTrig_0_31
             16 -> LL_EXTI_EnableEvent_0_31
             16 -> LL_EXTI_EnableFallingTrig_0_31
             16 -> LL_EXTI_EnableIT_0_31
             16 -> LL_EXTI_EnableRisingTrig_0_31
        0  LL_EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
      40  LL_EXTI_DeInit
      14  LL_EXTI_DisableEvent_0_31
      14  LL_EXTI_DisableFallingTrig_0_31
      14  LL_EXTI_DisableIT_0_31
      14  LL_EXTI_DisableRisingTrig_0_31
      12  LL_EXTI_EnableEvent_0_31
      12  LL_EXTI_EnableFallingTrig_0_31
      12  LL_EXTI_EnableIT_0_31
      12  LL_EXTI_EnableRisingTrig_0_31
     162  LL_EXTI_Init
      18  LL_EXTI_StructInit

 
 352 bytes in section .text
 
 352 bytes of CODE memory

Errors: none
Warnings: 1
