###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  06:15:46 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1 #
#                    xx_HAL_Driver\Src\stm32f1xx_ll_dma.c                     #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F #
#                    1xx_HAL_Driver\Src\stm32f1xx_ll_dma.c" -D                #
#                    USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F103xB -lC  #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    List\" -o "D:\projects\задания от                        #
#                    работодателя\ЭМИС\EWARM\mb_v1.0/Obj\" --no_cse           #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\stm32f1xx_ll_dma.lst                                 #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\stm32f1xx_ll_dma.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_dma.c
      1          /**
                   ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2            ******************************************************************************
      3            * @file    stm32f1xx_ll_dma.c
      4            * @author  MCD Application Team
      5            * @brief   DMA LL module driver.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          #if defined(USE_FULL_LL_DRIVER)
     36          
     37          /* Includes ------------------------------------------------------------------*/
     38          #include "stm32f1xx_ll_dma.h"

   \                                 In section .rodata, align 4
   \   static __absolute unsigned char const CHANNEL_OFFSET_TAB[7]
   \                     CHANNEL_OFFSET_TAB:
   \   00000000   0x08 0x1C          DC8 8, 28, 48, 68, 88, 108, 128, 0
   \              0x30 0x44    
   \              0x58 0x6C    
   \              0x80 0x00    

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ConfigTransfer(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_ConfigTransfer:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x....             LDR.N    R3,??DataTable4
   \   00000004   0x18CB             ADDS     R3,R1,R3
   \   00000006   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000000A   0x581B             LDR      R3,[R3, R0]
   \   0000000C   0x....             LDR.N    R4,??DataTable4_1  ;; 0xffff800f
   \   0000000E   0x4023             ANDS     R3,R4,R3
   \   00000010   0x431A             ORRS     R2,R2,R3
   \   00000012   0x....             LDR.N    R3,??DataTable4
   \   00000014   0x18C9             ADDS     R1,R1,R3
   \   00000016   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000001A   0x500A             STR      R2,[R1, R0]
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetDataLength(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetDataLength:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x....             LDR.N    R3,??DataTable4
   \   00000004   0x18CB             ADDS     R3,R1,R3
   \   00000006   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000000A   0x181B             ADDS     R3,R3,R0
   \   0000000C   0x....             LDR.N    R4,??DataTable4
   \   0000000E   0x1909             ADDS     R1,R1,R4
   \   00000010   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000014   0x1808             ADDS     R0,R1,R0
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x0C00             LSRS     R0,R0,#+16
   \   0000001A   0x0400             LSLS     R0,R0,#+16
   \   0000001C   0x4310             ORRS     R0,R2,R0
   \   0000001E   0x6058             STR      R0,[R3, #+4]
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetMemoryAddress(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetMemoryAddress:
   \   00000000   0x....             LDR.N    R3,??DataTable4
   \   00000002   0x18C9             ADDS     R1,R1,R3
   \   00000004   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000008   0x1808             ADDS     R0,R1,R0
   \   0000000A   0x60C2             STR      R2,[R0, #+12]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetPeriphAddress(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetPeriphAddress:
   \   00000000   0x....             LDR.N    R3,??DataTable4
   \   00000002   0x18C9             ADDS     R1,R1,R3
   \   00000004   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000008   0x1808             ADDS     R0,R1,R0
   \   0000000A   0x6082             STR      R2,[R0, #+8]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI1(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI1:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x6041             STR      R1,[R0, #+4]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI2(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI2:
   \   00000000   0x2110             MOVS     R1,#+16
   \   00000002   0x6041             STR      R1,[R0, #+4]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI3(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI3:
   \   00000000   0xF44F 0x7180      MOV      R1,#+256
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI4(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI4:
   \   00000000   0xF44F 0x5180      MOV      R1,#+4096
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI5(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI5:
   \   00000000   0xF45F 0x3180      MOVS     R1,#+65536
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI6(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI6:
   \   00000000   0xF45F 0x1180      MOVS     R1,#+1048576
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI7(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI7:
   \   00000000   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return
     39          #include "stm32f1xx_ll_bus.h"
     40          #ifdef  USE_FULL_ASSERT
     41          #include "stm32_assert.h"
     42          #else
     43          #define assert_param(expr) ((void)0U)
     44          #endif
     45          
     46          /** @addtogroup STM32F1xx_LL_Driver
     47            * @{
     48            */
     49          
     50          #if defined (DMA1) || defined (DMA2)
     51          
     52          /** @defgroup DMA_LL DMA
     53            * @{
     54            */
     55          
     56          /* Private types -------------------------------------------------------------*/
     57          /* Private variables ---------------------------------------------------------*/
     58          /* Private constants ---------------------------------------------------------*/
     59          /* Private macros ------------------------------------------------------------*/
     60          /** @addtogroup DMA_LL_Private_Macros
     61            * @{
     62            */
     63          #define IS_LL_DMA_DIRECTION(__VALUE__)          (((__VALUE__) == LL_DMA_DIRECTION_PERIPH_TO_MEMORY) || \
     64                                                           ((__VALUE__) == LL_DMA_DIRECTION_MEMORY_TO_PERIPH) || \
     65                                                           ((__VALUE__) == LL_DMA_DIRECTION_MEMORY_TO_MEMORY))
     66          
     67          #define IS_LL_DMA_MODE(__VALUE__)               (((__VALUE__) == LL_DMA_MODE_NORMAL) || \
     68                                                           ((__VALUE__) == LL_DMA_MODE_CIRCULAR))
     69          
     70          #define IS_LL_DMA_PERIPHINCMODE(__VALUE__)      (((__VALUE__) == LL_DMA_PERIPH_INCREMENT) || \
     71                                                           ((__VALUE__) == LL_DMA_PERIPH_NOINCREMENT))
     72          
     73          #define IS_LL_DMA_MEMORYINCMODE(__VALUE__)      (((__VALUE__) == LL_DMA_MEMORY_INCREMENT) || \
     74                                                           ((__VALUE__) == LL_DMA_MEMORY_NOINCREMENT))
     75          
     76          #define IS_LL_DMA_PERIPHDATASIZE(__VALUE__)     (((__VALUE__) == LL_DMA_PDATAALIGN_BYTE)      || \
     77                                                           ((__VALUE__) == LL_DMA_PDATAALIGN_HALFWORD)  || \
     78                                                           ((__VALUE__) == LL_DMA_PDATAALIGN_WORD))
     79          
     80          #define IS_LL_DMA_MEMORYDATASIZE(__VALUE__)     (((__VALUE__) == LL_DMA_MDATAALIGN_BYTE)      || \
     81                                                           ((__VALUE__) == LL_DMA_MDATAALIGN_HALFWORD)  || \
     82                                                           ((__VALUE__) == LL_DMA_MDATAALIGN_WORD))
     83          
     84          #define IS_LL_DMA_NBDATA(__VALUE__)             ((__VALUE__)  <= 0x0000FFFFU)
     85          
     86          #define IS_LL_DMA_PRIORITY(__VALUE__)           (((__VALUE__) == LL_DMA_PRIORITY_LOW)    || \
     87                                                           ((__VALUE__) == LL_DMA_PRIORITY_MEDIUM) || \
     88                                                           ((__VALUE__) == LL_DMA_PRIORITY_HIGH)   || \
     89                                                           ((__VALUE__) == LL_DMA_PRIORITY_VERYHIGH))
     90          
     91          #if defined (DMA2)
     92          #define IS_LL_DMA_ALL_CHANNEL_INSTANCE(INSTANCE, CHANNEL)  ((((INSTANCE) == DMA1) && \
     93                                                                      (((CHANNEL) == LL_DMA_CHANNEL_1) || \
     94                                                                       ((CHANNEL) == LL_DMA_CHANNEL_2) || \
     95                                                                       ((CHANNEL) == LL_DMA_CHANNEL_3) || \
     96                                                                       ((CHANNEL) == LL_DMA_CHANNEL_4) || \
     97                                                                       ((CHANNEL) == LL_DMA_CHANNEL_5) || \
     98                                                                       ((CHANNEL) == LL_DMA_CHANNEL_6) || \
     99                                                                       ((CHANNEL) == LL_DMA_CHANNEL_7))) || \
    100                                                                      (((INSTANCE) == DMA2) && \
    101                                                                      (((CHANNEL) == LL_DMA_CHANNEL_1) || \
    102                                                                       ((CHANNEL) == LL_DMA_CHANNEL_2) || \
    103                                                                       ((CHANNEL) == LL_DMA_CHANNEL_3) || \
    104                                                                       ((CHANNEL) == LL_DMA_CHANNEL_4) || \
    105                                                                       ((CHANNEL) == LL_DMA_CHANNEL_5))))
    106          #else
    107          #define IS_LL_DMA_ALL_CHANNEL_INSTANCE(INSTANCE, CHANNEL)  ((((INSTANCE) == DMA1) && \
    108                                                                      (((CHANNEL) == LL_DMA_CHANNEL_1) || \
    109                                                                       ((CHANNEL) == LL_DMA_CHANNEL_2) || \
    110                                                                       ((CHANNEL) == LL_DMA_CHANNEL_3) || \
    111                                                                       ((CHANNEL) == LL_DMA_CHANNEL_4) || \
    112                                                                       ((CHANNEL) == LL_DMA_CHANNEL_5) || \
    113                                                                       ((CHANNEL) == LL_DMA_CHANNEL_6) || \
    114                                                                       ((CHANNEL) == LL_DMA_CHANNEL_7))))
    115          #endif
    116          /**
    117            * @}
    118            */
    119          
    120          /* Private function prototypes -----------------------------------------------*/
    121          /* Exported functions --------------------------------------------------------*/
    122          /** @addtogroup DMA_LL_Exported_Functions
    123            * @{
    124            */
    125          
    126          /** @addtogroup DMA_LL_EF_Init
    127            * @{
    128            */
    129          
    130          /**
    131            * @brief  De-initialize the DMA registers to their default reset values.
    132            * @param  DMAx DMAx Instance
    133            * @param  Channel This parameter can be one of the following values:
    134            *         @arg @ref LL_DMA_CHANNEL_1
    135            *         @arg @ref LL_DMA_CHANNEL_2
    136            *         @arg @ref LL_DMA_CHANNEL_3
    137            *         @arg @ref LL_DMA_CHANNEL_4
    138            *         @arg @ref LL_DMA_CHANNEL_5
    139            *         @arg @ref LL_DMA_CHANNEL_6
    140            *         @arg @ref LL_DMA_CHANNEL_7
    141            * @retval An ErrorStatus enumeration value:
    142            *          - SUCCESS: DMA registers are de-initialized
    143            *          - ERROR: DMA registers are not de-initialized
    144            */

   \                                 In section .text, align 2, keep-with-next
    145          uint32_t LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Channel)
    146          {
   \                     LL_DMA_DeInit:
   \   00000000   0xB510             PUSH     {R4,LR}
    147            DMA_Channel_TypeDef *tmp = (DMA_Channel_TypeDef *)DMA1_Channel1;
   \   00000002   0x....             LDR.N    R2,??DataTable4_2  ;; 0x40020008
    148            ErrorStatus status = SUCCESS;
   \   00000004   0x2401             MOVS     R4,#+1
    149          
    150            /* Check the DMA Instance DMAx and Channel parameters*/
    151            assert_param(IS_LL_DMA_ALL_CHANNEL_INSTANCE(DMAx, Channel));
    152          
    153            tmp = (DMA_Channel_TypeDef *)(__LL_DMA_GET_CHANNEL_INSTANCE(DMAx, Channel));
   \   00000006   0x....             LDR.N    R3,??DataTable4_3  ;; 0x40020000
   \   00000008   0x4298             CMP      R0,R3
   \   0000000A   0xD103             BNE.N    ??LL_DMA_DeInit_0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD101             BNE.N    ??LL_DMA_DeInit_0
   \   00000010   0x....             LDR.N    R2,??DataTable4_2  ;; 0x40020008
   \   00000012   0xE023             B.N      ??LL_DMA_DeInit_1
   \                     ??LL_DMA_DeInit_0:
   \   00000014   0x....             LDR.N    R2,??DataTable4_3  ;; 0x40020000
   \   00000016   0x4290             CMP      R0,R2
   \   00000018   0xD103             BNE.N    ??LL_DMA_DeInit_2
   \   0000001A   0x2902             CMP      R1,#+2
   \   0000001C   0xD101             BNE.N    ??LL_DMA_DeInit_2
   \   0000001E   0x....             LDR.N    R2,??DataTable4_4  ;; 0x4002001c
   \   00000020   0xE01C             B.N      ??LL_DMA_DeInit_1
   \                     ??LL_DMA_DeInit_2:
   \   00000022   0x....             LDR.N    R2,??DataTable4_3  ;; 0x40020000
   \   00000024   0x4290             CMP      R0,R2
   \   00000026   0xD103             BNE.N    ??LL_DMA_DeInit_3
   \   00000028   0x2903             CMP      R1,#+3
   \   0000002A   0xD101             BNE.N    ??LL_DMA_DeInit_3
   \   0000002C   0x....             LDR.N    R2,??DataTable4_5  ;; 0x40020030
   \   0000002E   0xE015             B.N      ??LL_DMA_DeInit_1
   \                     ??LL_DMA_DeInit_3:
   \   00000030   0x....             LDR.N    R2,??DataTable4_3  ;; 0x40020000
   \   00000032   0x4290             CMP      R0,R2
   \   00000034   0xD103             BNE.N    ??LL_DMA_DeInit_4
   \   00000036   0x2904             CMP      R1,#+4
   \   00000038   0xD101             BNE.N    ??LL_DMA_DeInit_4
   \   0000003A   0x....             LDR.N    R2,??DataTable4_6  ;; 0x40020044
   \   0000003C   0xE00E             B.N      ??LL_DMA_DeInit_1
   \                     ??LL_DMA_DeInit_4:
   \   0000003E   0x....             LDR.N    R2,??DataTable4_3  ;; 0x40020000
   \   00000040   0x4290             CMP      R0,R2
   \   00000042   0xD103             BNE.N    ??LL_DMA_DeInit_5
   \   00000044   0x2905             CMP      R1,#+5
   \   00000046   0xD101             BNE.N    ??LL_DMA_DeInit_5
   \   00000048   0x....             LDR.N    R2,??DataTable4_7  ;; 0x40020058
   \   0000004A   0xE007             B.N      ??LL_DMA_DeInit_1
   \                     ??LL_DMA_DeInit_5:
   \   0000004C   0x....             LDR.N    R2,??DataTable4_3  ;; 0x40020000
   \   0000004E   0x4290             CMP      R0,R2
   \   00000050   0xD103             BNE.N    ??LL_DMA_DeInit_6
   \   00000052   0x2906             CMP      R1,#+6
   \   00000054   0xD101             BNE.N    ??LL_DMA_DeInit_6
   \   00000056   0x....             LDR.N    R2,??DataTable4_8  ;; 0x4002006c
   \   00000058   0xE000             B.N      ??LL_DMA_DeInit_1
   \                     ??LL_DMA_DeInit_6:
   \   0000005A   0x....             LDR.N    R2,??DataTable4_9  ;; 0x40020080
    154          
    155            /* Disable the selected DMAx_Channely */
    156            CLEAR_BIT(tmp->CCR, DMA_CCR_EN);
   \                     ??LL_DMA_DeInit_1:
   \   0000005C   0x6813             LDR      R3,[R2, #+0]
   \   0000005E   0x085B             LSRS     R3,R3,#+1
   \   00000060   0x005B             LSLS     R3,R3,#+1
   \   00000062   0x6013             STR      R3,[R2, #+0]
    157          
    158            /* Reset DMAx_Channely control register */
    159            LL_DMA_WriteReg(tmp, CCR, 0U);
   \   00000064   0x2300             MOVS     R3,#+0
   \   00000066   0x6013             STR      R3,[R2, #+0]
    160          
    161            /* Reset DMAx_Channely remaining bytes register */
    162            LL_DMA_WriteReg(tmp, CNDTR, 0U);
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0x6053             STR      R3,[R2, #+4]
    163          
    164            /* Reset DMAx_Channely peripheral address register */
    165            LL_DMA_WriteReg(tmp, CPAR, 0U);
   \   0000006C   0x2300             MOVS     R3,#+0
   \   0000006E   0x6093             STR      R3,[R2, #+8]
    166          
    167            /* Reset DMAx_Channely memory address register */
    168            LL_DMA_WriteReg(tmp, CMAR, 0U);
   \   00000070   0x2300             MOVS     R3,#+0
   \   00000072   0x60D3             STR      R3,[R2, #+12]
    169          
    170            if (Channel == LL_DMA_CHANNEL_1)
   \   00000074   0x2901             CMP      R1,#+1
   \   00000076   0xD102             BNE.N    ??LL_DMA_DeInit_7
    171            {
    172              /* Reset interrupt pending bits for DMAx Channel1 */
    173              LL_DMA_ClearFlag_GI1(DMAx);
   \   00000078   0x.... 0x....      BL       LL_DMA_ClearFlag_GI1
   \   0000007C   0xE01E             B.N      ??LL_DMA_DeInit_8
    174            }
    175            else if (Channel == LL_DMA_CHANNEL_2)
   \                     ??LL_DMA_DeInit_7:
   \   0000007E   0x2902             CMP      R1,#+2
   \   00000080   0xD102             BNE.N    ??LL_DMA_DeInit_9
    176            {
    177              /* Reset interrupt pending bits for DMAx Channel2 */
    178              LL_DMA_ClearFlag_GI2(DMAx);
   \   00000082   0x.... 0x....      BL       LL_DMA_ClearFlag_GI2
   \   00000086   0xE019             B.N      ??LL_DMA_DeInit_8
    179            }
    180            else if (Channel == LL_DMA_CHANNEL_3)
   \                     ??LL_DMA_DeInit_9:
   \   00000088   0x2903             CMP      R1,#+3
   \   0000008A   0xD102             BNE.N    ??LL_DMA_DeInit_10
    181            {
    182              /* Reset interrupt pending bits for DMAx Channel3 */
    183              LL_DMA_ClearFlag_GI3(DMAx);
   \   0000008C   0x.... 0x....      BL       LL_DMA_ClearFlag_GI3
   \   00000090   0xE014             B.N      ??LL_DMA_DeInit_8
    184            }
    185            else if (Channel == LL_DMA_CHANNEL_4)
   \                     ??LL_DMA_DeInit_10:
   \   00000092   0x2904             CMP      R1,#+4
   \   00000094   0xD102             BNE.N    ??LL_DMA_DeInit_11
    186            {
    187              /* Reset interrupt pending bits for DMAx Channel4 */
    188              LL_DMA_ClearFlag_GI4(DMAx);
   \   00000096   0x.... 0x....      BL       LL_DMA_ClearFlag_GI4
   \   0000009A   0xE00F             B.N      ??LL_DMA_DeInit_8
    189            }
    190            else if (Channel == LL_DMA_CHANNEL_5)
   \                     ??LL_DMA_DeInit_11:
   \   0000009C   0x2905             CMP      R1,#+5
   \   0000009E   0xD102             BNE.N    ??LL_DMA_DeInit_12
    191            {
    192              /* Reset interrupt pending bits for DMAx Channel5 */
    193              LL_DMA_ClearFlag_GI5(DMAx);
   \   000000A0   0x.... 0x....      BL       LL_DMA_ClearFlag_GI5
   \   000000A4   0xE00A             B.N      ??LL_DMA_DeInit_8
    194            }
    195          
    196            else if (Channel == LL_DMA_CHANNEL_6)
   \                     ??LL_DMA_DeInit_12:
   \   000000A6   0x2906             CMP      R1,#+6
   \   000000A8   0xD102             BNE.N    ??LL_DMA_DeInit_13
    197            {
    198              /* Reset interrupt pending bits for DMAx Channel6 */
    199              LL_DMA_ClearFlag_GI6(DMAx);
   \   000000AA   0x.... 0x....      BL       LL_DMA_ClearFlag_GI6
   \   000000AE   0xE005             B.N      ??LL_DMA_DeInit_8
    200            }
    201            else if (Channel == LL_DMA_CHANNEL_7)
   \                     ??LL_DMA_DeInit_13:
   \   000000B0   0x2907             CMP      R1,#+7
   \   000000B2   0xD102             BNE.N    ??LL_DMA_DeInit_14
    202            {
    203              /* Reset interrupt pending bits for DMAx Channel7 */
    204              LL_DMA_ClearFlag_GI7(DMAx);
   \   000000B4   0x.... 0x....      BL       LL_DMA_ClearFlag_GI7
   \   000000B8   0xE000             B.N      ??LL_DMA_DeInit_8
    205            }
    206            else
    207            {
    208              status = ERROR;
   \                     ??LL_DMA_DeInit_14:
   \   000000BA   0x2400             MOVS     R4,#+0
    209            }
    210          
    211            return status;
   \                     ??LL_DMA_DeInit_8:
   \   000000BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0xBD10             POP      {R4,PC}          ;; return
    212          }
    213          
    214          /**
    215            * @brief  Initialize the DMA registers according to the specified parameters in DMA_InitStruct.
    216            * @note   To convert DMAx_Channely Instance to DMAx Instance and Channely, use helper macros :
    217            *         @arg @ref __LL_DMA_GET_INSTANCE
    218            *         @arg @ref __LL_DMA_GET_CHANNEL
    219            * @param  DMAx DMAx Instance
    220            * @param  Channel This parameter can be one of the following values:
    221            *         @arg @ref LL_DMA_CHANNEL_1
    222            *         @arg @ref LL_DMA_CHANNEL_2
    223            *         @arg @ref LL_DMA_CHANNEL_3
    224            *         @arg @ref LL_DMA_CHANNEL_4
    225            *         @arg @ref LL_DMA_CHANNEL_5
    226            *         @arg @ref LL_DMA_CHANNEL_6
    227            *         @arg @ref LL_DMA_CHANNEL_7
    228            * @param  DMA_InitStruct pointer to a @ref LL_DMA_InitTypeDef structure.
    229            * @retval An ErrorStatus enumeration value:
    230            *          - SUCCESS: DMA registers are initialized
    231            *          - ERROR: Not applicable
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
    234          {
   \                     LL_DMA_Init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    235            /* Check the DMA Instance DMAx and Channel parameters*/
    236            assert_param(IS_LL_DMA_ALL_CHANNEL_INSTANCE(DMAx, Channel));
    237          
    238            /* Check the DMA parameters from DMA_InitStruct */
    239            assert_param(IS_LL_DMA_DIRECTION(DMA_InitStruct->Direction));
    240            assert_param(IS_LL_DMA_MODE(DMA_InitStruct->Mode));
    241            assert_param(IS_LL_DMA_PERIPHINCMODE(DMA_InitStruct->PeriphOrM2MSrcIncMode));
    242            assert_param(IS_LL_DMA_MEMORYINCMODE(DMA_InitStruct->MemoryOrM2MDstIncMode));
    243            assert_param(IS_LL_DMA_PERIPHDATASIZE(DMA_InitStruct->PeriphOrM2MSrcDataSize));
    244            assert_param(IS_LL_DMA_MEMORYDATASIZE(DMA_InitStruct->MemoryOrM2MDstDataSize));
    245            assert_param(IS_LL_DMA_NBDATA(DMA_InitStruct->NbData));
    246            assert_param(IS_LL_DMA_PRIORITY(DMA_InitStruct->Priority));
    247          
    248            /*---------------------------- DMAx CCR Configuration ------------------------
    249             * Configure DMAx_Channely: data transfer direction, data transfer mode,
    250             *                          peripheral and memory increment mode,
    251             *                          data size alignment and  priority level with parameters :
    252             * - Direction:      DMA_CCR_DIR and DMA_CCR_MEM2MEM bits
    253             * - Mode:           DMA_CCR_CIRC bit
    254             * - PeriphOrM2MSrcIncMode:  DMA_CCR_PINC bit
    255             * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
    256             * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
    257             * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
    258             * - Priority:               DMA_CCR_PL[1:0] bits
    259             */
    260            LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
    261                                  DMA_InitStruct->Mode                   | \
    262                                  DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
    263                                  DMA_InitStruct->MemoryOrM2MDstIncMode  | \
    264                                  DMA_InitStruct->PeriphOrM2MSrcDataSize | \
    265                                  DMA_InitStruct->MemoryOrM2MDstDataSize | \
    266                                  DMA_InitStruct->Priority);
   \   00000008   0x68B0             LDR      R0,[R6, #+8]
   \   0000000A   0x68F1             LDR      R1,[R6, #+12]
   \   0000000C   0x4308             ORRS     R0,R1,R0
   \   0000000E   0x6931             LDR      R1,[R6, #+16]
   \   00000010   0x4308             ORRS     R0,R1,R0
   \   00000012   0x6971             LDR      R1,[R6, #+20]
   \   00000014   0x4308             ORRS     R0,R1,R0
   \   00000016   0x69B1             LDR      R1,[R6, #+24]
   \   00000018   0x4308             ORRS     R0,R1,R0
   \   0000001A   0x69F1             LDR      R1,[R6, #+28]
   \   0000001C   0x4308             ORRS     R0,R1,R0
   \   0000001E   0x6A71             LDR      R1,[R6, #+36]
   \   00000020   0xEA51 0x0200      ORRS     R2,R1,R0
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       LL_DMA_ConfigTransfer
    267          
    268            /*-------------------------- DMAx CMAR Configuration -------------------------
    269             * Configure the memory or destination base address with parameter :
    270             * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
    271             */
    272            LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
   \   0000002C   0x6872             LDR      R2,[R6, #+4]
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       LL_DMA_SetMemoryAddress
    273          
    274            /*-------------------------- DMAx CPAR Configuration -------------------------
    275             * Configure the peripheral or source base address with parameter :
    276             * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
    277             */
    278            LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
   \   00000036   0x6832             LDR      R2,[R6, #+0]
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       LL_DMA_SetPeriphAddress
    279          
    280            /*--------------------------- DMAx CNDTR Configuration -----------------------
    281             * Configure the peripheral base address with parameter :
    282             * - NbData: DMA_CNDTR_NDT[15:0] bits
    283             */
    284            LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
   \   00000040   0x6A32             LDR      R2,[R6, #+32]
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       LL_DMA_SetDataLength
    285          
    286            return SUCCESS;
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    287          }
    288          
    289          /**
    290            * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
    291            * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
    292            * @retval None
    293            */

   \                                 In section .text, align 2, keep-with-next
    294          void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
    295          {
    296            /* Set DMA_InitStruct fields to default values */
    297            DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
   \                     LL_DMA_StructInit:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    298            DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
    299            DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6081             STR      R1,[R0, #+8]
    300            DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x60C1             STR      R1,[R0, #+12]
    301            DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6101             STR      R1,[R0, #+16]
    302            DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6141             STR      R1,[R0, #+20]
    303            DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
    304            DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x61C1             STR      R1,[R0, #+28]
    305            DMA_InitStruct->NbData                 = 0x00000000U;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6201             STR      R1,[R0, #+32]
    306            DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x6241             STR      R1,[R0, #+36]
    307          }
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     CHANNEL_OFFSET_TAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xFFFF800F         DC32     0xffff800f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40020030         DC32     0x40020030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40020044         DC32     0x40020044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x4002006C         DC32     0x4002006c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40020080         DC32     0x40020080
    308          
    309          /**
    310            * @}
    311            */
    312          
    313          /**
    314            * @}
    315            */
    316          
    317          /**
    318            * @}
    319            */
    320          
    321          #endif /* DMA1 || DMA2 */
    322          
    323          /**
    324            * @}
    325            */
    326          
    327          #endif /* USE_FULL_LL_DRIVER */
    328          
    329          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LL_DMA_ClearFlag_GI1
        0  LL_DMA_ClearFlag_GI2
        0  LL_DMA_ClearFlag_GI3
        0  LL_DMA_ClearFlag_GI4
        0  LL_DMA_ClearFlag_GI5
        0  LL_DMA_ClearFlag_GI6
        0  LL_DMA_ClearFlag_GI7
        4  LL_DMA_ConfigTransfer
        8  LL_DMA_DeInit
              8 -> LL_DMA_ClearFlag_GI1
              8 -> LL_DMA_ClearFlag_GI2
              8 -> LL_DMA_ClearFlag_GI3
              8 -> LL_DMA_ClearFlag_GI4
              8 -> LL_DMA_ClearFlag_GI5
              8 -> LL_DMA_ClearFlag_GI6
              8 -> LL_DMA_ClearFlag_GI7
       16  LL_DMA_Init
             16 -> LL_DMA_ConfigTransfer
             16 -> LL_DMA_SetDataLength
             16 -> LL_DMA_SetMemoryAddress
             16 -> LL_DMA_SetPeriphAddress
        4  LL_DMA_SetDataLength
        0  LL_DMA_SetMemoryAddress
        0  LL_DMA_SetPeriphAddress
        0  LL_DMA_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       8  CHANNEL_OFFSET_TAB
       6  LL_DMA_ClearFlag_GI1
       6  LL_DMA_ClearFlag_GI2
       8  LL_DMA_ClearFlag_GI3
       8  LL_DMA_ClearFlag_GI4
       8  LL_DMA_ClearFlag_GI5
       8  LL_DMA_ClearFlag_GI6
       8  LL_DMA_ClearFlag_GI7
      32  LL_DMA_ConfigTransfer
     194  LL_DMA_DeInit
      78  LL_DMA_Init
      36  LL_DMA_SetDataLength
      14  LL_DMA_SetMemoryAddress
      14  LL_DMA_SetPeriphAddress
      42  LL_DMA_StructInit

 
   8 bytes in section .rodata
 502 bytes in section .text
 
 502 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: 1
