###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  03:21:39 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\FreeModbus\modb #
#                    us\functions\mbfuncdisc.c                                #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\FreeModbus\mod #
#                    bus\functions\mbfuncdisc.c" -D USE_FULL_LL_DRIVER -D     #
#                    USE_HAL_DRIVER -D STM32F103xB -lC "D:\projects\задания   #
#                    от работодателя\ЭМИС\EWARM\mb_v1.0/List\" -o             #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\mbfuncdisc.lst                                       #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\mbfuncdisc.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\FreeModbus\modbus\functions\mbfuncdisc.c
      1           /*
      2            * FreeRTOS Modbus Libary: A Modbus serial implementation for FreeRTOS
      3            * Copyright (C) 2006 Christian Walter <wolti@sil.at>
      4            *
      5            * This library is free software; you can redistribute it and/or
      6            * modify it under the terms of the GNU Lesser General Public
      7            * License as published by the Free Software Foundation; either
      8            * version 2.1 of the License, or (at your option) any later version.
      9            *
     10            * This library is distributed in the hope that it will be useful,
     11            * but WITHOUT ANY WARRANTY; without even the implied warranty of
     12            * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     13            * Lesser General Public License for more details.
     14            *
     15            * You should have received a copy of the GNU Lesser General Public
     16            * License along with this library; if not, write to the Free Software
     17            * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     18            */
     19          
     20          
     21          
     22          /* ----------------------- System includes ----------------------------------*/
     23          #include "stdlib.h"
     24          #include "string.h"
     25          
     26          /* ----------------------- Platform includes --------------------------------*/
     27          #include "port.h"
     28          
     29          /* ----------------------- Modbus includes ----------------------------------*/
     30          #include "mb.h"
     31          #include "mbframe.h"
     32          #include "mbproto.h"
     33          #include "mbconfig.h"
     34          
     35          /* ----------------------- Defines ------------------------------------------*/
     36          #define MB_PDU_FUNC_READ_ADDR_OFF           ( MB_PDU_DATA_OFF )
     37          #define MB_PDU_FUNC_READ_DISCCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
     38          #define MB_PDU_FUNC_READ_SIZE               ( 4 )
     39          #define MB_PDU_FUNC_READ_DISCCNT_MAX        ( 0x07D0 )
     40          
     41          /* ----------------------- Static functions ---------------------------------*/
     42          eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
     43          
     44          /* ----------------------- Start implementation -----------------------------*/
     45          
     46          #if MB_FUNC_READ_COILS_ENABLED > 0
     47          

   \                                 In section .text, align 2, keep-with-next
     48          eMBException
     49          eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
     50          {
   \                     eMBFuncReadDiscreteInputs:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
     51              USHORT          usRegAddress;
     52              USHORT          usDiscreteCnt;
     53              UCHAR           ucNBytes;
     54              UCHAR          *pucFrameCur;
     55          
     56              eMBException    eStatus = MB_EX_NONE;
   \   00000004   0x2500             MOVS     R5,#+0
     57              eMBErrorCode    eRegStatus;
     58          
     59              if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
   \   00000006   0x8821             LDRH     R1,[R4, #+0]
   \   00000008   0x2905             CMP      R1,#+5
   \   0000000A   0xD13B             BNE.N    ??eMBFuncReadDiscreteInputs_0
     60              {
     61                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x0209             LSLS     R1,R1,#+8
     62                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
   \   00000010   0x7882             LDRB     R2,[R0, #+2]
   \   00000012   0x4311             ORRS     R1,R2,R1
     63                  usRegAddress++;
   \   00000014   0x1C49             ADDS     R1,R1,#+1
     64          
     65                  usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
   \   00000016   0x78C2             LDRB     R2,[R0, #+3]
   \   00000018   0x0212             LSLS     R2,R2,#+8
     66                  usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
   \   0000001A   0x7903             LDRB     R3,[R0, #+4]
   \   0000001C   0x431A             ORRS     R2,R3,R2
     67          
     68                  /* Check if the number of registers to read is valid. If not
     69                   * return Modbus illegal data value exception. 
     70                   */
     71                  if( ( usDiscreteCnt >= 1 ) &&
     72                      ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
   \   0000001E   0x1E53             SUBS     R3,R2,#+1
   \   00000020   0xF240 0x76CF      MOVW     R6,#+1999
   \   00000024   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000026   0x42B3             CMP      R3,R6
   \   00000028   0xD22A             BCS.N    ??eMBFuncReadDiscreteInputs_1
     73                  {
     74                      /* Set the current PDU data pointer to the beginning. */
     75                      pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
     76                      *usLen = MB_PDU_FUNC_OFF;
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x8023             STRH     R3,[R4, #+0]
     77          
     78                      /* First byte contains the function code. */
     79                      *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
   \   0000002E   0x2302             MOVS     R3,#+2
   \   00000030   0x7003             STRB     R3,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
     80                      *usLen += 1;
   \   00000034   0x8823             LDRH     R3,[R4, #+0]
   \   00000036   0x1C5B             ADDS     R3,R3,#+1
   \   00000038   0x8023             STRH     R3,[R4, #+0]
     81          
     82                      /* Test if the quantity of coils is a multiple of 8. If not last
     83                       * byte is only partially field with unused coils set to zero. */
     84                      if( ( usDiscreteCnt & 0x0007 ) != 0 )
   \   0000003A   0x2307             MOVS     R3,#+7
   \   0000003C   0x421A             TST      R2,R3
   \   0000003E   0xD005             BEQ.N    ??eMBFuncReadDiscreteInputs_2
     85                      {
     86                          ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
   \   00000040   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000042   0x2308             MOVS     R3,#+8
   \   00000044   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   00000048   0x1C5E             ADDS     R6,R3,#+1
   \   0000004A   0xE003             B.N      ??eMBFuncReadDiscreteInputs_3
     87                      }
     88                      else
     89                      {
     90                          ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
   \                     ??eMBFuncReadDiscreteInputs_2:
   \   0000004C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004E   0x2308             MOVS     R3,#+8
   \   00000050   0xFB92 0xF6F3      SDIV     R6,R2,R3
     91                      }
     92                      *pucFrameCur++ = ucNBytes;
   \                     ??eMBFuncReadDiscreteInputs_3:
   \   00000054   0x7006             STRB     R6,[R0, #+0]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
     93                      *usLen += 1;
   \   00000058   0x8823             LDRH     R3,[R4, #+0]
   \   0000005A   0x1C5B             ADDS     R3,R3,#+1
   \   0000005C   0x8023             STRH     R3,[R4, #+0]
     94          
     95                      eRegStatus =
     96                          eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
   \   0000005E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000060   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000062   0x.... 0x....      BL       eMBRegDiscreteCB
     97          
     98                      /* If an error occured convert it into a Modbus exception. */
     99                      if( eRegStatus != MB_ENOERR )
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD004             BEQ.N    ??eMBFuncReadDiscreteInputs_4
    100                      {
    101                          eStatus = prveMBError2Exception( eRegStatus );
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x.... 0x....      BL       prveMBError2Exception
   \   00000072   0x0005             MOVS     R5,R0
   \   00000074   0xE007             B.N      ??eMBFuncReadDiscreteInputs_5
    102                      }
    103                      else
    104                      {
    105                          /* The response contains the function code, the starting address
    106                           * and the quantity of registers. We reuse the old values in the 
    107                           * buffer because they are still valid. */
    108                          *usLen += ucNBytes;;
   \                     ??eMBFuncReadDiscreteInputs_4:
   \   00000076   0x8820             LDRH     R0,[R4, #+0]
   \   00000078   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007A   0x1830             ADDS     R0,R6,R0
   \   0000007C   0x8020             STRH     R0,[R4, #+0]
   \   0000007E   0xE002             B.N      ??eMBFuncReadDiscreteInputs_5
    109                      }
    110                  }
    111                  else
    112                  {
    113                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadDiscreteInputs_1:
   \   00000080   0x2503             MOVS     R5,#+3
   \   00000082   0xE000             B.N      ??eMBFuncReadDiscreteInputs_5
    114                  }
    115              }
    116              else
    117              {
    118                  /* Can't be a valid read coil register request because the length
    119                   * is incorrect. */
    120                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadDiscreteInputs_0:
   \   00000084   0x2503             MOVS     R5,#+3
    121              }
    122              return eStatus;
   \                     ??eMBFuncReadDiscreteInputs_5:
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0xBD70             POP      {R4-R6,PC}       ;; return
    123          }
    124          
    125          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  eMBFuncReadDiscreteInputs
             16 -> eMBRegDiscreteCB
             16 -> prveMBError2Exception


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     140  eMBFuncReadDiscreteInputs

 
 140 bytes in section .text
 
 140 bytes of CODE memory

Errors: none
Warnings: none
