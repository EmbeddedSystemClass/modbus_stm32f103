###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  03:21:40 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\FreeModbus\modb #
#                    us\functions\mbfuncholding.c                             #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\FreeModbus\mod #
#                    bus\functions\mbfuncholding.c" -D USE_FULL_LL_DRIVER -D  #
#                    USE_HAL_DRIVER -D STM32F103xB -lC "D:\projects\задания   #
#                    от работодателя\ЭМИС\EWARM\mb_v1.0/List\" -o             #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\mbfuncholding.lst                                    #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\mbfuncholding.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\FreeModbus\modbus\functions\mbfuncholding.c
      1          /* 
      2           * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
      3           * Copyright (c) 2006 Christian Walter <wolti@sil.at>
      4           * All rights reserved.
      5           *
      6           * Redistribution and use in source and binary forms, with or without
      7           * modification, are permitted provided that the following conditions
      8           * are met:
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           * 2. Redistributions in binary form must reproduce the above copyright
     12           *    notice, this list of conditions and the following disclaimer in the
     13           *    documentation and/or other materials provided with the distribution.
     14           * 3. The name of the author may not be used to endorse or promote products
     15           *    derived from this software without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     19           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     20           * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     22           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     23           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     24           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     25           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
     26           * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           *
     28           * File: $Id: mbfuncholding.c,v 1.12 2007/02/18 23:48:22 wolti Exp $
     29           */
     30          
     31          /* ----------------------- System includes ----------------------------------*/
     32          #include "stdlib.h"
     33          #include "string.h"
     34          
     35          /* ----------------------- Platform includes --------------------------------*/
     36          #include "port.h"
     37          
     38          /* ----------------------- Modbus includes ----------------------------------*/
     39          #include "mb.h"
     40          #include "mbframe.h"
     41          #include "mbproto.h"
     42          #include "mbconfig.h"
     43          
     44          /* ----------------------- Defines ------------------------------------------*/
     45          #define MB_PDU_FUNC_READ_ADDR_OFF               ( MB_PDU_DATA_OFF + 0)
     46          #define MB_PDU_FUNC_READ_REGCNT_OFF             ( MB_PDU_DATA_OFF + 2 )
     47          #define MB_PDU_FUNC_READ_SIZE                   ( 4 )
     48          #define MB_PDU_FUNC_READ_REGCNT_MAX             ( 0x007D )
     49          
     50          #define MB_PDU_FUNC_WRITE_ADDR_OFF              ( MB_PDU_DATA_OFF + 0)
     51          #define MB_PDU_FUNC_WRITE_VALUE_OFF             ( MB_PDU_DATA_OFF + 2 )
     52          #define MB_PDU_FUNC_WRITE_SIZE                  ( 4 )
     53          
     54          #define MB_PDU_FUNC_WRITE_MUL_ADDR_OFF          ( MB_PDU_DATA_OFF + 0 )
     55          #define MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
     56          #define MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF       ( MB_PDU_DATA_OFF + 4 )
     57          #define MB_PDU_FUNC_WRITE_MUL_VALUES_OFF        ( MB_PDU_DATA_OFF + 5 )
     58          #define MB_PDU_FUNC_WRITE_MUL_SIZE_MIN          ( 5 )
     59          #define MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX        ( 0x0078 )
     60          
     61          #define MB_PDU_FUNC_READWRITE_READ_ADDR_OFF     ( MB_PDU_DATA_OFF + 0 )
     62          #define MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF   ( MB_PDU_DATA_OFF + 2 )
     63          #define MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF    ( MB_PDU_DATA_OFF + 4 )
     64          #define MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF  ( MB_PDU_DATA_OFF + 6 )
     65          #define MB_PDU_FUNC_READWRITE_BYTECNT_OFF       ( MB_PDU_DATA_OFF + 8 )
     66          #define MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF  ( MB_PDU_DATA_OFF + 9 )
     67          #define MB_PDU_FUNC_READWRITE_SIZE_MIN          ( 9 )
     68          
     69          /* ----------------------- Static functions ---------------------------------*/
     70          eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
     71          
     72          /* ----------------------- Start implementation -----------------------------*/
     73          
     74          #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
     75          

   \                                 In section .text, align 2, keep-with-next
     76          eMBException
     77          eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
     78          {
   \                     eMBFuncWriteHoldingRegister:
   \   00000000   0xB510             PUSH     {R4,LR}
     79              USHORT          usRegAddress;
     80              eMBException    eStatus = MB_EX_NONE;
   \   00000002   0x2400             MOVS     R4,#+0
     81              eMBErrorCode    eRegStatus;
     82          
     83              if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
   \   00000004   0x8809             LDRH     R1,[R1, #+0]
   \   00000006   0x2905             CMP      R1,#+5
   \   00000008   0xD112             BNE.N    ??eMBFuncWriteHoldingRegister_0
     84              {
     85                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
   \   0000000A   0x7841             LDRB     R1,[R0, #+1]
   \   0000000C   0x0209             LSLS     R1,R1,#+8
     86                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
   \   0000000E   0x7882             LDRB     R2,[R0, #+2]
   \   00000010   0x4311             ORRS     R1,R2,R1
     87                  usRegAddress++;
   \   00000012   0x1C49             ADDS     R1,R1,#+1
     88          
     89                  /* Make callback to update the value. */
     90                  eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
     91                                                usRegAddress, 1, MB_REG_WRITE );
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x1CC0             ADDS     R0,R0,#+3
   \   0000001C   0x.... 0x....      BL       eMBRegHoldingCB
     92          
     93                  /* If an error occured convert it into a Modbus exception. */
     94                  if( eRegStatus != MB_ENOERR )
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD005             BEQ.N    ??eMBFuncWriteHoldingRegister_1
     95                  {
     96                      eStatus = prveMBError2Exception( eRegStatus );
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       prveMBError2Exception
   \   0000002C   0x0004             MOVS     R4,R0
   \   0000002E   0xE000             B.N      ??eMBFuncWriteHoldingRegister_1
     97                  }
     98              }
     99              else
    100              {
    101                  /* Can't be a valid request because the length is incorrect. */
    102                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncWriteHoldingRegister_0:
   \   00000030   0x2403             MOVS     R4,#+3
    103              }
    104              return eStatus;
   \                     ??eMBFuncWriteHoldingRegister_1:
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    105          }
    106          #endif
    107          
    108          #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0

   \                                 In section .text, align 2, keep-with-next
    109          eMBException
    110          eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
    111          {
   \                     eMBFuncWriteMultipleHoldingRegister:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
    112              USHORT          usRegAddress;
    113              USHORT          usRegCount;
    114              UCHAR           ucRegByteCount;
    115          
    116              eMBException    eStatus = MB_EX_NONE;
   \   00000004   0x2500             MOVS     R5,#+0
    117              eMBErrorCode    eRegStatus;
    118          
    119              if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
   \   00000006   0x8821             LDRH     R1,[R4, #+0]
   \   00000008   0x2906             CMP      R1,#+6
   \   0000000A   0xD326             BCC.N    ??eMBFuncWriteMultipleHoldingRegister_0
    120              {
    121                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x0209             LSLS     R1,R1,#+8
    122                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
   \   00000010   0x7882             LDRB     R2,[R0, #+2]
   \   00000012   0x4311             ORRS     R1,R2,R1
    123                  usRegAddress++;
   \   00000014   0x1C49             ADDS     R1,R1,#+1
    124          
    125                  usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
   \   00000016   0x78C2             LDRB     R2,[R0, #+3]
   \   00000018   0x0212             LSLS     R2,R2,#+8
    126                  usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
   \   0000001A   0x7903             LDRB     R3,[R0, #+4]
   \   0000001C   0x431A             ORRS     R2,R3,R2
    127          
    128                  ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
   \   0000001E   0x7943             LDRB     R3,[R0, #+5]
    129          
    130                  if( ( usRegCount >= 1 ) &&
    131                      ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
    132                      ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
   \   00000020   0x1E56             SUBS     R6,R2,#+1
   \   00000022   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000024   0x2E78             CMP      R6,#+120
   \   00000026   0xD216             BCS.N    ??eMBFuncWriteMultipleHoldingRegister_1
   \   00000028   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002A   0x0056             LSLS     R6,R2,#+1
   \   0000002C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x42B3             CMP      R3,R6
   \   00000032   0xD110             BNE.N    ??eMBFuncWriteMultipleHoldingRegister_1
    133                  {
    134                      /* Make callback to update the register values. */
    135                      eRegStatus =
    136                          eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
    137                                           usRegAddress, usRegCount, MB_REG_WRITE );
   \   00000034   0x2301             MOVS     R3,#+1
   \   00000036   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000038   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003A   0x1D80             ADDS     R0,R0,#+6
   \   0000003C   0x.... 0x....      BL       eMBRegHoldingCB
    138          
    139                      /* If an error occured convert it into a Modbus exception. */
    140                      if( eRegStatus != MB_ENOERR )
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD004             BEQ.N    ??eMBFuncWriteMultipleHoldingRegister_2
    141                      {
    142                          eStatus = prveMBError2Exception( eRegStatus );
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       prveMBError2Exception
   \   0000004C   0x0005             MOVS     R5,R0
   \   0000004E   0xE005             B.N      ??eMBFuncWriteMultipleHoldingRegister_3
    143                      }
    144                      else
    145                      {
    146                          /* The response contains the function code, the starting
    147                           * address and the quantity of registers. We reuse the
    148                           * old values in the buffer because they are still valid.
    149                           */
    150                          *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
   \                     ??eMBFuncWriteMultipleHoldingRegister_2:
   \   00000050   0x2005             MOVS     R0,#+5
   \   00000052   0x8020             STRH     R0,[R4, #+0]
   \   00000054   0xE002             B.N      ??eMBFuncWriteMultipleHoldingRegister_3
    151                      }
    152                  }
    153                  else
    154                  {
    155                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncWriteMultipleHoldingRegister_1:
   \   00000056   0x2503             MOVS     R5,#+3
   \   00000058   0xE000             B.N      ??eMBFuncWriteMultipleHoldingRegister_3
    156                  }
    157              }
    158              else
    159              {
    160                  /* Can't be a valid request because the length is incorrect. */
    161                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncWriteMultipleHoldingRegister_0:
   \   0000005A   0x2503             MOVS     R5,#+3
    162              }
    163              return eStatus;
   \                     ??eMBFuncWriteMultipleHoldingRegister_3:
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
    164          }
    165          #endif
    166          
    167          #if MB_FUNC_READ_HOLDING_ENABLED > 0
    168          

   \                                 In section .text, align 2, keep-with-next
    169          eMBException
    170          eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
    171          {
   \                     eMBFuncReadHoldingRegister:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
    172              USHORT          usRegAddress;
    173              USHORT          usRegCount;
    174              UCHAR          *pucFrameCur;
    175          
    176              eMBException    eStatus = MB_EX_NONE;
   \   00000004   0x2500             MOVS     R5,#+0
    177              eMBErrorCode    eRegStatus;
    178          
    179              if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
   \   00000006   0x8821             LDRH     R1,[R4, #+0]
   \   00000008   0x2905             CMP      R1,#+5
   \   0000000A   0xD132             BNE.N    ??eMBFuncReadHoldingRegister_0
    180              {
    181                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x0209             LSLS     R1,R1,#+8
    182                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
   \   00000010   0x7882             LDRB     R2,[R0, #+2]
   \   00000012   0x4311             ORRS     R1,R2,R1
    183                  usRegAddress++;
   \   00000014   0x1C49             ADDS     R1,R1,#+1
    184          
    185                  usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
   \   00000016   0x78C2             LDRB     R2,[R0, #+3]
   \   00000018   0x0216             LSLS     R6,R2,#+8
    186                  usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
   \   0000001A   0x7902             LDRB     R2,[R0, #+4]
   \   0000001C   0x0016             MOVS     R6,R2
    187          
    188                  /* Check if the number of registers to read is valid. If not
    189                   * return Modbus illegal data value exception. 
    190                   */
    191                  if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
   \   0000001E   0x1E72             SUBS     R2,R6,#+1
   \   00000020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000022   0x2A7D             CMP      R2,#+125
   \   00000024   0xD223             BCS.N    ??eMBFuncReadHoldingRegister_1
    192                  {
    193                      /* Set the current PDU data pointer to the beginning. */
    194                      pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
    195                      *usLen = MB_PDU_FUNC_OFF;
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x8022             STRH     R2,[R4, #+0]
    196          
    197                      /* First byte contains the function code. */
    198                      *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
   \   0000002A   0x2203             MOVS     R2,#+3
   \   0000002C   0x7002             STRB     R2,[R0, #+0]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
    199                      *usLen += 1;
   \   00000030   0x8822             LDRH     R2,[R4, #+0]
   \   00000032   0x1C52             ADDS     R2,R2,#+1
   \   00000034   0x8022             STRH     R2,[R4, #+0]
    200          
    201                      /* Second byte in the response contain the number of bytes. */
    202                      *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
   \   00000036   0x0032             MOVS     R2,R6
   \   00000038   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003A   0x0052             LSLS     R2,R2,#+1
   \   0000003C   0x7002             STRB     R2,[R0, #+0]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
    203                      *usLen += 1;
   \   00000040   0x8822             LDRH     R2,[R4, #+0]
   \   00000042   0x1C52             ADDS     R2,R2,#+1
   \   00000044   0x8022             STRH     R2,[R4, #+0]
    204          
    205                      /* Make callback to fill the buffer. */
    206                      eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
   \   00000046   0x2300             MOVS     R3,#+0
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004E   0x.... 0x....      BL       eMBRegHoldingCB
    207                      /* If an error occured convert it into a Modbus exception. */
    208                      if( eRegStatus != MB_ENOERR )
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD004             BEQ.N    ??eMBFuncReadHoldingRegister_2
    209                      {
    210                          eStatus = prveMBError2Exception( eRegStatus );
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x.... 0x....      BL       prveMBError2Exception
   \   0000005E   0x0005             MOVS     R5,R0
   \   00000060   0xE008             B.N      ??eMBFuncReadHoldingRegister_3
    211                      }
    212                      else
    213                      {
    214                          *usLen += usRegCount * 2;
   \                     ??eMBFuncReadHoldingRegister_2:
   \   00000062   0x8820             LDRH     R0,[R4, #+0]
   \   00000064   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000066   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   0000006A   0x8020             STRH     R0,[R4, #+0]
   \   0000006C   0xE002             B.N      ??eMBFuncReadHoldingRegister_3
    215                      }
    216                  }
    217                  else
    218                  {
    219                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadHoldingRegister_1:
   \   0000006E   0x2503             MOVS     R5,#+3
   \   00000070   0xE000             B.N      ??eMBFuncReadHoldingRegister_3
    220                  }
    221              }
    222              else
    223              {
    224                  /* Can't be a valid request because the length is incorrect. */
    225                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadHoldingRegister_0:
   \   00000072   0x2503             MOVS     R5,#+3
    226              }
    227              return eStatus;
   \                     ??eMBFuncReadHoldingRegister_3:
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0xBD70             POP      {R4-R6,PC}       ;; return
    228          }
    229          
    230          #endif
    231          
    232          #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
    233          

   \                                 In section .text, align 2, keep-with-next
    234          eMBException
    235          eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
    236          {
   \                     eMBFuncReadWriteMultipleHoldingRegister:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
    237              USHORT          usRegReadAddress;
    238              USHORT          usRegReadCount;
    239              USHORT          usRegWriteAddress;
    240              USHORT          usRegWriteCount;
    241              UCHAR           ucRegWriteByteCount;
    242              UCHAR          *pucFrameCur;
    243          
    244              eMBException    eStatus = MB_EX_NONE;
   \   00000008   0x2500             MOVS     R5,#+0
    245              eMBErrorCode    eRegStatus;
    246          
    247              if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
   \   0000000A   0x8820             LDRH     R0,[R4, #+0]
   \   0000000C   0x280A             CMP      R0,#+10
   \   0000000E   0xD356             BCC.N    ??eMBFuncReadWriteMultipleHoldingRegister_0
    248              {
    249                  usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
   \   00000010   0x7870             LDRB     R0,[R6, #+1]
   \   00000012   0x0207             LSLS     R7,R0,#+8
    250                  usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
   \   00000014   0x78B0             LDRB     R0,[R6, #+2]
   \   00000016   0x4307             ORRS     R7,R0,R7
    251                  usRegReadAddress++;
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
    252          
    253                  usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
   \   0000001A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000001C   0xEA5F 0x2800      LSLS     R8,R0,#+8
    254                  usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
   \   00000020   0x7930             LDRB     R0,[R6, #+4]
   \   00000022   0xEA50 0x0808      ORRS     R8,R0,R8
    255          
    256                  usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
   \   00000026   0x7970             LDRB     R0,[R6, #+5]
   \   00000028   0x0201             LSLS     R1,R0,#+8
    257                  usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
   \   0000002A   0x79B0             LDRB     R0,[R6, #+6]
   \   0000002C   0x4301             ORRS     R1,R0,R1
    258                  usRegWriteAddress++;
   \   0000002E   0x1C49             ADDS     R1,R1,#+1
    259          
    260                  usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
   \   00000030   0x79F0             LDRB     R0,[R6, #+7]
   \   00000032   0x0202             LSLS     R2,R0,#+8
    261                  usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
   \   00000034   0x7A30             LDRB     R0,[R6, #+8]
   \   00000036   0x4302             ORRS     R2,R0,R2
    262          
    263                  ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
   \   00000038   0x7A70             LDRB     R0,[R6, #+9]
    264          
    265                  if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    266                      ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    267                      ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
   \   0000003A   0xF1B8 0x0301      SUBS     R3,R8,#+1
   \   0000003E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000040   0x2B7D             CMP      R3,#+125
   \   00000042   0xD23B             BCS.N    ??eMBFuncReadWriteMultipleHoldingRegister_1
   \   00000044   0x1E53             SUBS     R3,R2,#+1
   \   00000046   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000048   0x2B79             CMP      R3,#+121
   \   0000004A   0xD237             BCS.N    ??eMBFuncReadWriteMultipleHoldingRegister_1
   \   0000004C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004E   0x0053             LSLS     R3,R2,#+1
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x4283             CMP      R3,R0
   \   00000054   0xD132             BNE.N    ??eMBFuncReadWriteMultipleHoldingRegister_1
    268                  {
    269                      /* Make callback to update the register values. */
    270                      eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    271                                                    usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
   \   00000056   0x2301             MOVS     R3,#+1
   \   00000058   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000005A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005C   0xF116 0x000A      ADDS     R0,R6,#+10
   \   00000060   0x.... 0x....      BL       eMBRegHoldingCB
    272          
    273                      if( eRegStatus == MB_ENOERR )
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD120             BNE.N    ??eMBFuncReadWriteMultipleHoldingRegister_2
    274                      {
    275                          /* Set the current PDU data pointer to the beginning. */
    276                          pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
    277                          *usLen = MB_PDU_FUNC_OFF;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x8020             STRH     R0,[R4, #+0]
    278          
    279                          /* First byte contains the function code. */
    280                          *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
   \   0000006E   0x2017             MOVS     R0,#+23
   \   00000070   0x7030             STRB     R0,[R6, #+0]
   \   00000072   0x1C76             ADDS     R6,R6,#+1
    281                          *usLen += 1;
   \   00000074   0x8820             LDRH     R0,[R4, #+0]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x8020             STRH     R0,[R4, #+0]
    282          
    283                          /* Second byte in the response contain the number of bytes. */
    284                          *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
   \   0000007A   0x4640             MOV      R0,R8
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x0040             LSLS     R0,R0,#+1
   \   00000080   0x7030             STRB     R0,[R6, #+0]
   \   00000082   0x1C76             ADDS     R6,R6,#+1
    285                          *usLen += 1;
   \   00000084   0x8820             LDRH     R0,[R4, #+0]
   \   00000086   0x1C40             ADDS     R0,R0,#+1
   \   00000088   0x8020             STRH     R0,[R4, #+0]
    286          
    287                          /* Make the read callback. */
    288                          eRegStatus =
    289                              eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
   \   0000008A   0x2300             MOVS     R3,#+0
   \   0000008C   0x4642             MOV      R2,R8
   \   0000008E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000090   0x0039             MOVS     R1,R7
   \   00000092   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   0x0030             MOVS     R0,R6
   \   00000096   0x.... 0x....      BL       eMBRegHoldingCB
    290                          if( eRegStatus == MB_ENOERR )
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD105             BNE.N    ??eMBFuncReadWriteMultipleHoldingRegister_2
    291                          {
    292                              *usLen += 2 * usRegReadCount;
   \   000000A0   0x8821             LDRH     R1,[R4, #+0]
   \   000000A2   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000A6   0xEB11 0x0148      ADDS     R1,R1,R8, LSL #+1
   \   000000AA   0x8021             STRH     R1,[R4, #+0]
    293                          }
    294                      }
    295                      if( eRegStatus != MB_ENOERR )
   \                     ??eMBFuncReadWriteMultipleHoldingRegister_2:
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD005             BEQ.N    ??eMBFuncReadWriteMultipleHoldingRegister_0
    296                      {
    297                          eStatus = prveMBError2Exception( eRegStatus );
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x.... 0x....      BL       prveMBError2Exception
   \   000000B8   0x0005             MOVS     R5,R0
   \   000000BA   0xE000             B.N      ??eMBFuncReadWriteMultipleHoldingRegister_0
    298                      }
    299                  }
    300                  else
    301                  {
    302                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadWriteMultipleHoldingRegister_1:
   \   000000BC   0x2503             MOVS     R5,#+3
    303                  }
    304              }
    305              return eStatus;
   \                     ??eMBFuncReadWriteMultipleHoldingRegister_0:
   \   000000BE   0x0028             MOVS     R0,R5
   \   000000C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C2   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    306          }
    307          
    308          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  eMBFuncReadHoldingRegister
             16 -> eMBRegHoldingCB
             16 -> prveMBError2Exception
       24  eMBFuncReadWriteMultipleHoldingRegister
             24 -> eMBRegHoldingCB
             24 -> prveMBError2Exception
        8  eMBFuncWriteHoldingRegister
              8 -> eMBRegHoldingCB
              8 -> prveMBError2Exception
       16  eMBFuncWriteMultipleHoldingRegister
             16 -> eMBRegHoldingCB
             16 -> prveMBError2Exception


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     122  eMBFuncReadHoldingRegister
     198  eMBFuncReadWriteMultipleHoldingRegister
      56  eMBFuncWriteHoldingRegister
      98  eMBFuncWriteMultipleHoldingRegister

 
 474 bytes in section .text
 
 474 bytes of CODE memory

Errors: none
Warnings: none
