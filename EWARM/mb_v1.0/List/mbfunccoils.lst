###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     27/Aug/2018  03:21:39 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\projects\задания от работодателя\ЭМИС\FreeModbus\modb #
#                    us\functions\mbfunccoils.c                               #
#    Command line =  "D:\projects\задания от работодателя\ЭМИС\FreeModbus\mod #
#                    bus\functions\mbfunccoils.c" -D USE_FULL_LL_DRIVER -D    #
#                    USE_HAL_DRIVER -D STM32F103xB -lC "D:\projects\задания   #
#                    от работодателя\ЭМИС\EWARM\mb_v1.0/List\" -o             #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Inc\" #
#                     -I "D:\projects\задания от                              #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc\" -I "D:\projects\задания от                         #
#                    работодателя\ЭМИС\EWARM/../Drivers/STM32F1xx_HAL_Driver/ #
#                    Inc/Legacy\" -I "D:\projects\задания от                  #
#                    работодателя\ЭМИС\EWARM/../Middlewares/Third_Party/FreeR #
#                    TOS/Source/portable/IAR/ARM_CM3\" -I                     #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Device/ST/STM32F1xx/Include\" -I                #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/include\" -I          #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Middl #
#                    ewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\" -I       #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../Drive #
#                    rs/CMSIS/Include\" -I "D:\projects\задания от            #
#                    работодателя\ЭМИС\EWARM/../FreeModbus\" -I               #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus\" -I "D:\projects\задания от                #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/rtu\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/ascii\" -I "D:\projects\задания от          #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/tcp\" -I    #
#                    "D:\projects\задания от работодателя\ЭМИС\EWARM/../FreeM #
#                    odbus/modbus/functions\" -I "D:\projects\задания от      #
#                    работодателя\ЭМИС\EWARM/../FreeModbus/modbus/include\"   #
#                    -I "D:\projects\задания от работодателя\ЭМИС\EWARM/../Fr #
#                    eeModbus/port\" -Ol                                      #
#    List file    =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/L #
#                    ist\mbfunccoils.lst                                      #
#    Object file  =  D:\projects\задания от работодателя\ЭМИС\EWARM\mb_v1.0/O #
#                    bj\mbfunccoils.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\projects\задания от работодателя\ЭМИС\FreeModbus\modbus\functions\mbfunccoils.c
      1          /* 
      2           * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
      3           * Copyright (c) 2006 Christian Walter <wolti@sil.at>
      4           * All rights reserved.
      5           *
      6           * Redistribution and use in source and binary forms, with or without
      7           * modification, are permitted provided that the following conditions
      8           * are met:
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           * 2. Redistributions in binary form must reproduce the above copyright
     12           *    notice, this list of conditions and the following disclaimer in the
     13           *    documentation and/or other materials provided with the distribution.
     14           * 3. The name of the author may not be used to endorse or promote products
     15           *    derived from this software without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     19           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     20           * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     22           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     23           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     24           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     25           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
     26           * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           *
     28           * File: $Id: mbfunccoils.c,v 1.8 2007/02/18 23:47:16 wolti Exp $
     29           */
     30          
     31          /* ----------------------- System includes ----------------------------------*/
     32          #include "stdlib.h"
     33          #include "string.h"
     34          
     35          /* ----------------------- Platform includes --------------------------------*/
     36          #include "port.h"
     37          
     38          /* ----------------------- Modbus includes ----------------------------------*/
     39          #include "mb.h"
     40          #include "mbframe.h"
     41          #include "mbproto.h"
     42          #include "mbconfig.h"
     43          
     44          /* ----------------------- Defines ------------------------------------------*/
     45          #define MB_PDU_FUNC_READ_ADDR_OFF           ( MB_PDU_DATA_OFF )
     46          #define MB_PDU_FUNC_READ_COILCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
     47          #define MB_PDU_FUNC_READ_SIZE               ( 4 )
     48          #define MB_PDU_FUNC_READ_COILCNT_MAX        ( 0x07D0 )
     49          
     50          #define MB_PDU_FUNC_WRITE_ADDR_OFF          ( MB_PDU_DATA_OFF )
     51          #define MB_PDU_FUNC_WRITE_VALUE_OFF         ( MB_PDU_DATA_OFF + 2 )
     52          #define MB_PDU_FUNC_WRITE_SIZE              ( 4 )
     53          
     54          #define MB_PDU_FUNC_WRITE_MUL_ADDR_OFF      ( MB_PDU_DATA_OFF )
     55          #define MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF   ( MB_PDU_DATA_OFF + 2 )
     56          #define MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF   ( MB_PDU_DATA_OFF + 4 )
     57          #define MB_PDU_FUNC_WRITE_MUL_VALUES_OFF    ( MB_PDU_DATA_OFF + 5 )
     58          #define MB_PDU_FUNC_WRITE_MUL_SIZE_MIN      ( 5 )
     59          #define MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX   ( 0x07B0 )
     60          
     61          /* ----------------------- Static functions ---------------------------------*/
     62          eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
     63          
     64          /* ----------------------- Start implementation -----------------------------*/
     65          
     66          #if MB_FUNC_READ_COILS_ENABLED > 0
     67          

   \                                 In section .text, align 2, keep-with-next
     68          eMBException
     69          eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
     70          {
   \                     eMBFuncReadCoils:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
     71              USHORT          usRegAddress;
     72              USHORT          usCoilCount;
     73              UCHAR           ucNBytes;
     74              UCHAR          *pucFrameCur;
     75          
     76              eMBException    eStatus = MB_EX_NONE;
   \   00000004   0x2500             MOVS     R5,#+0
     77              eMBErrorCode    eRegStatus;
     78          
     79              if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
   \   00000006   0x8821             LDRH     R1,[R4, #+0]
   \   00000008   0x2905             CMP      R1,#+5
   \   0000000A   0xD13C             BNE.N    ??eMBFuncReadCoils_0
     80              {
     81                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x0209             LSLS     R1,R1,#+8
     82                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
   \   00000010   0x7882             LDRB     R2,[R0, #+2]
   \   00000012   0x4311             ORRS     R1,R2,R1
     83                  usRegAddress++;
   \   00000014   0x1C49             ADDS     R1,R1,#+1
     84          
     85                  usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
   \   00000016   0x78C2             LDRB     R2,[R0, #+3]
   \   00000018   0x0212             LSLS     R2,R2,#+8
     86                  usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
   \   0000001A   0x7903             LDRB     R3,[R0, #+4]
   \   0000001C   0x431A             ORRS     R2,R3,R2
     87          
     88                  /* Check if the number of registers to read is valid. If not
     89                   * return Modbus illegal data value exception. 
     90                   */
     91                  if( ( usCoilCount >= 1 ) &&
     92                      ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
   \   0000001E   0x1E53             SUBS     R3,R2,#+1
   \   00000020   0xF240 0x76CF      MOVW     R6,#+1999
   \   00000024   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000026   0x42B3             CMP      R3,R6
   \   00000028   0xD22B             BCS.N    ??eMBFuncReadCoils_1
     93                  {
     94                      /* Set the current PDU data pointer to the beginning. */
     95                      pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
     96                      *usLen = MB_PDU_FUNC_OFF;
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x8023             STRH     R3,[R4, #+0]
     97          
     98                      /* First byte contains the function code. */
     99                      *pucFrameCur++ = MB_FUNC_READ_COILS;
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0x7003             STRB     R3,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
    100                      *usLen += 1;
   \   00000034   0x8823             LDRH     R3,[R4, #+0]
   \   00000036   0x1C5B             ADDS     R3,R3,#+1
   \   00000038   0x8023             STRH     R3,[R4, #+0]
    101          
    102                      /* Test if the quantity of coils is a multiple of 8. If not last
    103                       * byte is only partially field with unused coils set to zero. */
    104                      if( ( usCoilCount & 0x0007 ) != 0 )
   \   0000003A   0x2307             MOVS     R3,#+7
   \   0000003C   0x421A             TST      R2,R3
   \   0000003E   0xD005             BEQ.N    ??eMBFuncReadCoils_2
    105                      {
    106                          ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
   \   00000040   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000042   0x2308             MOVS     R3,#+8
   \   00000044   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   00000048   0x1C5E             ADDS     R6,R3,#+1
   \   0000004A   0xE003             B.N      ??eMBFuncReadCoils_3
    107                      }
    108                      else
    109                      {
    110                          ucNBytes = ( UCHAR )( usCoilCount / 8 );
   \                     ??eMBFuncReadCoils_2:
   \   0000004C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004E   0x2308             MOVS     R3,#+8
   \   00000050   0xFB92 0xF6F3      SDIV     R6,R2,R3
    111                      }
    112                      *pucFrameCur++ = ucNBytes;
   \                     ??eMBFuncReadCoils_3:
   \   00000054   0x7006             STRB     R6,[R0, #+0]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
    113                      *usLen += 1;
   \   00000058   0x8823             LDRH     R3,[R4, #+0]
   \   0000005A   0x1C5B             ADDS     R3,R3,#+1
   \   0000005C   0x8023             STRH     R3,[R4, #+0]
    114          
    115                      eRegStatus =
    116                          eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
    117                                         MB_REG_READ );
   \   0000005E   0x2300             MOVS     R3,#+0
   \   00000060   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0x.... 0x....      BL       eMBRegCoilsCB
    118          
    119                      /* If an error occured convert it into a Modbus exception. */
    120                      if( eRegStatus != MB_ENOERR )
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD004             BEQ.N    ??eMBFuncReadCoils_4
    121                      {
    122                          eStatus = prveMBError2Exception( eRegStatus );
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0x.... 0x....      BL       prveMBError2Exception
   \   00000074   0x0005             MOVS     R5,R0
   \   00000076   0xE007             B.N      ??eMBFuncReadCoils_5
    123                      }
    124                      else
    125                      {
    126                          /* The response contains the function code, the starting address
    127                           * and the quantity of registers. We reuse the old values in the 
    128                           * buffer because they are still valid. */
    129                          *usLen += ucNBytes;;
   \                     ??eMBFuncReadCoils_4:
   \   00000078   0x8820             LDRH     R0,[R4, #+0]
   \   0000007A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007C   0x1830             ADDS     R0,R6,R0
   \   0000007E   0x8020             STRH     R0,[R4, #+0]
   \   00000080   0xE002             B.N      ??eMBFuncReadCoils_5
    130                      }
    131                  }
    132                  else
    133                  {
    134                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadCoils_1:
   \   00000082   0x2503             MOVS     R5,#+3
   \   00000084   0xE000             B.N      ??eMBFuncReadCoils_5
    135                  }
    136              }
    137              else
    138              {
    139                  /* Can't be a valid read coil register request because the length
    140                   * is incorrect. */
    141                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
   \                     ??eMBFuncReadCoils_0:
   \   00000086   0x2503             MOVS     R5,#+3
    142              }
    143              return eStatus;
   \                     ??eMBFuncReadCoils_5:
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
    144          }
    145          
    146          #if MB_FUNC_WRITE_COIL_ENABLED > 0
    147          eMBException
    148          eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
    149          {
    150              USHORT          usRegAddress;
    151              UCHAR           ucBuf[2];
    152          
    153              eMBException    eStatus = MB_EX_NONE;
    154              eMBErrorCode    eRegStatus;
    155          
    156              if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    157              {
    158                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    159                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    160                  usRegAddress++;
    161          
    162                  if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    163                      ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    164                        ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
    165                  {
    166                      ucBuf[1] = 0;
    167                      if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    168                      {
    169                          ucBuf[0] = 1;
    170                      }
    171                      else
    172                      {
    173                          ucBuf[0] = 0;
    174                      }
    175                      eRegStatus =
    176                          eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
    177          
    178                      /* If an error occured convert it into a Modbus exception. */
    179                      if( eRegStatus != MB_ENOERR )
    180                      {
    181                          eStatus = prveMBError2Exception( eRegStatus );
    182                      }
    183                  }
    184                  else
    185                  {
    186                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    187                  }
    188              }
    189              else
    190              {
    191                  /* Can't be a valid write coil register request because the length
    192                   * is incorrect. */
    193                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    194              }
    195              return eStatus;
    196          }
    197          
    198          #endif
    199          
    200          #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
    201          eMBException
    202          eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
    203          {
    204              USHORT          usRegAddress;
    205              USHORT          usCoilCnt;
    206              UCHAR           ucByteCount;
    207              UCHAR           ucByteCountVerify;
    208          
    209              eMBException    eStatus = MB_EX_NONE;
    210              eMBErrorCode    eRegStatus;
    211          
    212              if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    213              {
    214                  usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    215                  usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    216                  usRegAddress++;
    217          
    218                  usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    219                  usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    220          
    221                  ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    222          
    223                  /* Compute the number of expected bytes in the request. */
    224                  if( ( usCoilCnt & 0x0007 ) != 0 )
    225                  {
    226                      ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    227                  }
    228                  else
    229                  {
    230                      ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
    231                  }
    232          
    233                  if( ( usCoilCnt >= 1 ) &&
    234                      ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    235                      ( ucByteCountVerify == ucByteCount ) )
    236                  {
    237                      eRegStatus =
    238                          eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
    239                                         usRegAddress, usCoilCnt, MB_REG_WRITE );
    240          
    241                      /* If an error occured convert it into a Modbus exception. */
    242                      if( eRegStatus != MB_ENOERR )
    243                      {
    244                          eStatus = prveMBError2Exception( eRegStatus );
    245                      }
    246                      else
    247                      {
    248                          /* The response contains the function code, the starting address
    249                           * and the quantity of registers. We reuse the old values in the 
    250                           * buffer because they are still valid. */
    251                          *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    252                      }
    253                  }
    254                  else
    255                  {
    256                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    257                  }
    258              }
    259              else
    260              {
    261                  /* Can't be a valid write coil register request because the length
    262                   * is incorrect. */
    263                  eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    264              }
    265              return eStatus;
    266          }
    267          
    268          #endif
    269          
    270          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  eMBFuncReadCoils
             16 -> eMBRegCoilsCB
             16 -> prveMBError2Exception


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     142  eMBFuncReadCoils

 
 142 bytes in section .text
 
 142 bytes of CODE memory

Errors: none
Warnings: none
